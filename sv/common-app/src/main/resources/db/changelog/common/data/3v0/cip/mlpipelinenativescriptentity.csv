"cname","filename","filescript","organization"
"LEORGSCS58369","LEORGSCS58369_leo1311.py","","leo1311"
"LEOSMPLN39749","LEOSMPLN39749_leo1311.py","","leo1311"
"LEOLNRNF78657","LEOLNRNF78657_leo1311.py","ZnJvbSBmbGFzayBpbXBvcnQgRmxhc2ssIGpzb25pZnksIHJlcXVlc3QNCmltcG9ydCBudW1weSBhcyBucA0KaW1wb3J0IGpvYmxpYg0KaW1wb3J0IHBhbmRhcyBhcyBwZA0KDQphcHAgPSBGbGFzayhfX25hbWVfXykNCg0KaW1wb3J0IG9zDQppbXBvcnQganNvbg0KZnJvbSBib3RvY29yZS5jbGllbnQgaW1wb3J0IENvbmZpZw0KaW1wb3J0IHJlcXVlc3RzDQppbXBvcnQgc2h1dGlsDQppbXBvcnQgYm90bzMNCmltcG9ydCBzdGF0DQppbXBvcnQgc3lzDQoNCmFyZ3VtZW50cyA9IHN5cy5hcmd2DQphcmdzRGljdCA9IHt9DQpmb3IgYXJnIGluIGFyZ3VtZW50czoNCiAgICB0cnk6DQogICAgICAgIGFyZ3NEaWN0W2FyZy5zcGxpdCgnOicpWzBdXSA9ICgnOicpLmpvaW4oYXJnLnNwbGl0KCc6JylbMTpdKQ0KICAgIGV4Y2VwdCBJbmRleEVycm9yIGFzIGU6DQogICAgICAgIGxvZ2dlci5lcnJvcihmIkludmFsaWQgYXJndW1lbnQgZm9ybWF0OiB7YXJnfS4gRXJyb3I6IHtzdHIoZSl9IikNCiAgICAgICAgY29udGludWUNCg0KZGF0YXNvdXJjZV9kZXRhaWxzID0ganNvbi5sb2FkcyhhcmdzRGljdC5nZXQoImRhdGFzb3VyY2UiKSkNCg0KZGVmIHBhcnNlX25lc3RlZF9qc29uKG9iaik6DQogICAgaWYgaXNpbnN0YW5jZShvYmosIHN0cik6DQogICAgICAgIHRyeToNCiAgICAgICAgICAgIHBhcnNlZCA9IGpzb24ubG9hZHMob2JqKQ0KICAgICAgICAgICAgcmV0dXJuIHBhcnNlX25lc3RlZF9qc29uKHBhcnNlZCkNCiAgICAgICAgZXhjZXB0IChqc29uLkpTT05EZWNvZGVFcnJvciwgVHlwZUVycm9yKToNCiAgICAgICAgICAgIHJldHVybiBvYmoNCiAgICBlbGlmIGlzaW5zdGFuY2Uob2JqLCBkaWN0KToNCiAgICAgICAgcmV0dXJuIHtrOiBwYXJzZV9uZXN0ZWRfanNvbih2KSBmb3IgaywgdiBpbiBvYmouaXRlbXMoKX0NCiAgICBlbGlmIGlzaW5zdGFuY2Uob2JqLCBsaXN0KToNCiAgICAgICAgcmV0dXJuIFtwYXJzZV9uZXN0ZWRfanNvbihlbGVtKSBmb3IgZWxlbSBpbiBvYmpdDQogICAgZWxzZToNCiAgICAgICAgcmV0dXJuIG9iag0KICAgICAgICANCg0KcGFyc2VkX2RhdGFfZGV0YWlscyA9IHBhcnNlX25lc3RlZF9qc29uKGRhdGFzb3VyY2VfZGV0YWlscykNCnByaW50KHBhcnNlZF9kYXRhX2RldGFpbHMpDQoNCg0KZGVmIGRvd25sb2FkX21vZGVsKGJ1Y2tldF9uYW1lLCBzM19rZXkpOg0KICAgICIiIg0KICAgIHBhcmFtczoNCiAgICBidWNrZXRfbmFtZTogTmFtZSBvZiB0aGUgYnVja2V0Lg0KICAgIHMzX2tleTogVGhlIHBhdGggb2YgdGhlIHMzIHdoZW4gdXBsb2FkZWQgYWZ0ZXIgYnVja2V0IG5hbWUuDQogICAgUmV0dXJuczoNCiAgICBUaGUgRG93bmxvYWRlZCBwYXRoIG9mIHRoZSBtb2RlbC4NCiAgICAiIiINCiAgICANCg0KICAgIGFjY2Vzc19rZXkgPSBwYXJzZWRfZGF0YV9kZXRhaWxzWydhY2Nlc3NLZXknXQ0KICAgIHNlY3JldF9rZXkgPSBwYXJzZWRfZGF0YV9kZXRhaWxzWydzZWNyZXRLZXknXQ0KICAgIHJlZ2lvbiA9IHBhcnNlZF9kYXRhX2RldGFpbHNbJ1JlZ2lvbiddDQogICAgZW5kcG9pbnRfdXJsID0gcGFyc2VkX2RhdGFfZGV0YWlsc1sndXJsJ10NCiAgICBzMyA9IGJvdG8zLmNsaWVudCgnczMnLA0KICAgICAgICAgICAgICAgICAgICAgIGVuZHBvaW50X3VybCA9IGVuZHBvaW50X3VybCwNCiAgICAgICAgICAgICAgICAgICAgICByZWdpb25fbmFtZSA9IHJlZ2lvbiwNCiAgICAgICAgICAgICAgICAgICAgICBhd3NfYWNjZXNzX2tleV9pZCA9IGFjY2Vzc19rZXksDQogICAgICAgICAgICAgICAgICAgICAgYXdzX3NlY3JldF9hY2Nlc3Nfa2V5ID0gc2VjcmV0X2tleSwNCiAgICAgICAgICAgICAgICAgICAgICBjb25maWcgPSBDb25maWcoc2lnbmF0dXJlX3ZlcnNpb24gPSAiczN2NCIpDQogICAgICAgICAgICAgICAgICAgICAgKQ0KICAgIGxvY2FsX2ZvbGRlcnMgPSBvcy5wYXRoLmpvaW4ob3MuZ2V0Y3dkKCksICJtb2RlbHMiKQ0KICAgIG9zLm1ha2VkaXJzKGxvY2FsX2ZvbGRlcnMsIGV4aXN0X29rPVRydWUpDQogICAgZmlsZV9uYW1lID0gb3MucGF0aC5iYXNlbmFtZShzM19rZXkpDQogICAgbG9jYWxfcGF0aCA9IG9zLnBhdGguam9pbihsb2NhbF9mb2xkZXJzLCBmaWxlX25hbWUpDQogICAgczMuZG93bmxvYWRfZmlsZShidWNrZXRfbmFtZSwgczNfa2V5LCBsb2NhbF9wYXRoKQ0KICAgIHByaW50KGYiZmlsZSBkb3dubG9hZGVkIHRvIHtsb2NhbF9wYXRofSIpDQogICAgcmV0dXJuIGxvY2FsX3BhdGgNCiANCmRvd25sb2FkZWRfcGF0aCA9IGRvd25sb2FkX21vZGVsKCdhaXBtb2RlbHMnLCAibW9kZWxzL2xpbmVhci9zYWxhcnlfbGluZWFyX3JlZ3Jlc3Npb25fbW9kZWxfOGQ0MzA3YjItYzVjNC00NTBmLWIxYWItYjM2ZGU2Y2RmOGNlIikNCiANCg0KQGFwcC5yb3V0ZSgnL2xpbmVhcl9pbmZlcicsIG1ldGhvZHM9WydQT1NUJ10pDQpkZWYgbGluZWFyX2luZmVyKCk6DQogICAgaW5wdXRfZGF0YSA9IHJlcXVlc3QuZ2V0X2pzb24oKQ0KICAgIG1vZGVsX2J1bmRsZSA9IGpvYmxpYi5sb2FkKGRvd25sb2FkZWRfcGF0aCkNCiAgICBYX25ldyA9IG5wLmFycmF5KFtpbnB1dF9kYXRhLmdldCgieWVhcnNfb2ZfZXhwZXJpYW5jZSIpXSkucmVzaGFwZSgtMSwxKQ0KICAgIHByZWRpY3Rpb25zID0gbW9kZWxfYnVuZGxlLnByZWRpY3QoWF9uZXcpDQogICAgcHJlZF9saXN0ID0gcHJlZGljdGlvbnMudG9saXN0KCkNCiAgICByZXR1cm4ganNvbmlmeSh7IlNhbGFyeSI6IHByZWRfbGlzdH0pDQoNCkBhcHAucm91dGUoJy90ZXN0JywgbWV0aG9kcz1bJ0dFVCddKQ0KZGVmIHRlc3QoKToNCiAgICByZXR1cm4geyJyZXNwb25zZSI6ICJJbmZlciBydW5uaW5nIHN1Y2Nlc3NmdWxseSJ9DQoNCg0KDQppZiBfX25hbWVfXyA9PSAnX19tYWluX18nOg0KICAgIGFwcC5ydW4oZGVidWc9RmFsc2UsIGhvc3Q9JzAuMC4wLjAnLCBwb3J0ID0gODA4MikNCiAgICANCg0KDQoNCg0KDQoNCiANCg0KDQo=","leo1311"
"LEOLNRST23278","LEOLNRST23278_leo1311.py","aW1wb3J0IHN0cmVhbWxpdCBhcyBzdA0KaW1wb3J0IHJlcXVlc3RzDQppbXBvcnQganNvbg0KaW1wb3J0IG9zDQoNCiMgQ2xhc3NpZmljYXRpb24gQVBJIGVuZHBvaW50DQpQT1NUX0FQSV9VUkxfTElORUFSID0gImh0dHA6Ly8xMDAuNzguNDkuMjA6ODA4Mi8vbGluZWFyX2luZmVyIg0KDQpzdC5zZXRfcGFnZV9jb25maWcocGFnZV90aXRsZT0iTGluZWFyIE1vZGVsIiwgbGF5b3V0PSJjZW50ZXJlZCIpDQpzdC50aXRsZSgiTGluZWFyIE1vZGVsIikNCnN0Lm1hcmtkb3duKCJFbnRlciB5b3VyIGlucHV0IGRhdGEgaW4gSlNPTiBmb3JtYXQuIikNCg0KIyBKU09OIGlucHV0IGJveA0KZGF0YV9pbnB1dCA9IHN0LnRleHRfYXJlYSgiSW5wdXQiLCBoZWlnaHQ9MjAwLHBsYWNlaG9sZGVyID0gew0KICAgICJ5ZWFyc19vZl9leHBlcmlhbmNlIjogWzUuMCwgMi41XQ0KfSkNCg0KDQoNCiMgU3VibWl0IGJ1dHRvbg0KaWYgc3QuYnV0dG9uKCJTdWJtaXQiKToNCiAgICBpZiBkYXRhX2lucHV0LnN0cmlwKCk6DQogICAgICAgIHRyeToNCiAgICAgICAgICAgIGRhdGEgPSBqc29uLmxvYWRzKGRhdGFfaW5wdXQpDQogICAgICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLnBvc3QoUE9TVF9BUElfVVJMX0xJTkVBUiwganNvbj1kYXRhKQ0KICAgICAgICAgICAgcmVzcG9uc2UucmFpc2VfZm9yX3N0YXR1cygpDQoNCiAgICAgICAgICAgICMgUHJldHR5LXByaW50IHJlc3BvbnNlDQogICAgICAgICAgICBzdC5zdWJoZWFkZXIoIkFQSSBSZXNwb25zZSIpDQogICAgICAgICAgICBzdC5qc29uKHJlc3BvbnNlLmpzb24oKSkNCg0KICAgICAgICBleGNlcHQganNvbi5KU09ORGVjb2RlRXJyb3I6DQogICAgICAgICAgICBzdC5lcnJvcigiaW52YWxpZCBKU09OIGZvcm1hdC4gUGxlYXNlIGNoZWNrIHlvdXIgaW5wdXQuIikNCiAgICAgICAgZXhjZXB0IHJlcXVlc3RzLmV4Y2VwdGlvbnMuUmVxdWVzdEV4Y2VwdGlvbiBhcyBlOg0KICAgICAgICAgICAgc3QuZXJyb3IoZiJBUEkgRXJyb3I6IHtzdHIoZSl9IikNCiAgICBlbHNlOg0KICAgICAgICBzdC53YXJuaW5nKCJQbGVhc2UgZW50ZXIgc29tZSBpbnB1dCBkYXRhIGJlZm9yZSBzdWJtaXR0aW5nLiIpDQogICAgICAgIA0KDQppZiBfX25hbWVfXyA9PSAnX19tYWluX18nOg0KICAgIG9zLnN5c3RlbSgncHl0aG9uIC1tIHN0cmVhbWxpdCBydW4gTEVPTE5SU1QyMzI3OF9sZW8xMzExLnB5IC0tc2VydmVyLmhlYWRsZXNzIHRydWUgLS1zZXJ2ZXIucG9ydCA4MDg1JykNCg0KDQoNCg0KDQog","leo1311"
"LEOCLSFC96212","LEOCLSFC96212_leo1311.py","","leo1311"
"LEOCLSFC82847","LEOCLSFC82847_leo1311.py","ZnJvbSBmbGFzayBpbXBvcnQgRmxhc2ssIGpzb25pZnksIHJlcXVlc3QNCmltcG9ydCBudW1weSBhcyBucA0KaW1wb3J0IGpvYmxpYg0KaW1wb3J0IHBhbmRhcyBhcyBwZA0KDQphcHAgPSBGbGFzayhfX25hbWVfXykNCg0KaW1wb3J0IG9zDQppbXBvcnQganNvbg0KZnJvbSBib3RvY29yZS5jbGllbnQgaW1wb3J0IENvbmZpZw0KaW1wb3J0IHJlcXVlc3RzDQppbXBvcnQgc2h1dGlsDQppbXBvcnQgYm90bzMNCmltcG9ydCBzdGF0DQppbXBvcnQgc3lzDQoNCmFyZ3VtZW50cyA9IHN5cy5hcmd2DQphcmdzRGljdCA9IHt9DQpmb3IgYXJnIGluIGFyZ3VtZW50czoNCiAgICB0cnk6DQogICAgICAgIGFyZ3NEaWN0W2FyZy5zcGxpdCgnOicpWzBdXSA9ICgnOicpLmpvaW4oYXJnLnNwbGl0KCc6JylbMTpdKQ0KICAgIGV4Y2VwdCBJbmRleEVycm9yIGFzIGU6DQogICAgICAgIGxvZ2dlci5lcnJvcihmIkludmFsaWQgYXJndW1lbnQgZm9ybWF0OiB7YXJnfS4gRXJyb3I6IHtzdHIoZSl9IikNCiAgICAgICAgY29udGludWUNCg0KZGF0YXNvdXJjZV9kZXRhaWxzID0ganNvbi5sb2FkcyhhcmdzRGljdC5nZXQoImRhdGFzb3VyY2UiKSkNCg0KZGVmIHBhcnNlX25lc3RlZF9qc29uKG9iaik6DQogICAgaWYgaXNpbnN0YW5jZShvYmosIHN0cik6DQogICAgICAgIHRyeToNCiAgICAgICAgICAgIHBhcnNlZCA9IGpzb24ubG9hZHMob2JqKQ0KICAgICAgICAgICAgcmV0dXJuIHBhcnNlX25lc3RlZF9qc29uKHBhcnNlZCkNCiAgICAgICAgZXhjZXB0IChqc29uLkpTT05EZWNvZGVFcnJvciwgVHlwZUVycm9yKToNCiAgICAgICAgICAgIHJldHVybiBvYmoNCiAgICBlbGlmIGlzaW5zdGFuY2Uob2JqLCBkaWN0KToNCiAgICAgICAgcmV0dXJuIHtrOiBwYXJzZV9uZXN0ZWRfanNvbih2KSBmb3IgaywgdiBpbiBvYmouaXRlbXMoKX0NCiAgICBlbGlmIGlzaW5zdGFuY2Uob2JqLCBsaXN0KToNCiAgICAgICAgcmV0dXJuIFtwYXJzZV9uZXN0ZWRfanNvbihlbGVtKSBmb3IgZWxlbSBpbiBvYmpdDQogICAgZWxzZToNCiAgICAgICAgcmV0dXJuIG9iag0KICAgICAgICANCg0KcGFyc2VkX2RhdGFfZGV0YWlscyA9IHBhcnNlX25lc3RlZF9qc29uKGRhdGFzb3VyY2VfZGV0YWlscykNCg0KDQpkZWYgZG93bmxvYWRfbW9kZWwoYnVja2V0X25hbWUsIHMzX2tleSk6DQogICAgIiIiDQogICAgcGFyYW1zOg0KICAgIGJ1Y2tldF9uYW1lOiBOYW1lIG9mIHRoZSBidWNrZXQuDQogICAgczNfa2V5OiBUaGUgcGF0aCBvZiB0aGUgczMgd2hlbiB1cGxvYWRlZCBhZnRlciBidWNrZXQgbmFtZS4NCiAgICBSZXR1cm5zOg0KICAgIFRoZSBEb3dubG9hZGVkIHBhdGggb2YgdGhlIG1vZGVsLg0KICAgICIiIg0KICAgIA0KDQogICAgYWNjZXNzX2tleSA9IHBhcnNlZF9kYXRhX2RldGFpbHNbJ2FjY2Vzc0tleSddDQogICAgc2VjcmV0X2tleSA9IHBhcnNlZF9kYXRhX2RldGFpbHNbJ3NlY3JldEtleSddDQogICAgcmVnaW9uID0gcGFyc2VkX2RhdGFfZGV0YWlsc1snUmVnaW9uJ10NCiAgICBlbmRwb2ludF91cmwgPSBwYXJzZWRfZGF0YV9kZXRhaWxzWyd1cmwnXQ0KICAgIHMzID0gYm90bzMuY2xpZW50KCdzMycsDQogICAgICAgICAgICAgICAgICAgICAgZW5kcG9pbnRfdXJsID0gZW5kcG9pbnRfdXJsLA0KICAgICAgICAgICAgICAgICAgICAgIHJlZ2lvbl9uYW1lID0gcmVnaW9uLA0KICAgICAgICAgICAgICAgICAgICAgIGF3c19hY2Nlc3Nfa2V5X2lkID0gYWNjZXNzX2tleSwNCiAgICAgICAgICAgICAgICAgICAgICBhd3Nfc2VjcmV0X2FjY2Vzc19rZXkgPSBzZWNyZXRfa2V5LA0KICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZyA9IENvbmZpZyhzaWduYXR1cmVfdmVyc2lvbiA9ICJzM3Y0IikNCiAgICAgICAgICAgICAgICAgICAgICApDQogICAgbG9jYWxfZm9sZGVycyA9IG9zLnBhdGguam9pbihvcy5nZXRjd2QoKSwgIm1vZGVscyIpDQogICAgb3MubWFrZWRpcnMobG9jYWxfZm9sZGVycywgZXhpc3Rfb2s9VHJ1ZSkNCiAgICBmaWxlX25hbWUgPSBvcy5wYXRoLmJhc2VuYW1lKHMzX2tleSkNCiAgICBsb2NhbF9wYXRoID0gb3MucGF0aC5qb2luKGxvY2FsX2ZvbGRlcnMsIGZpbGVfbmFtZSkNCiAgICBzMy5kb3dubG9hZF9maWxlKGJ1Y2tldF9uYW1lLCBzM19rZXksIGxvY2FsX3BhdGgpDQogICAgcHJpbnQoZiJmaWxlIGRvd25sb2FkZWQgdG8ge2xvY2FsX3BhdGh9IikNCiAgICByZXR1cm4gbG9jYWxfcGF0aA0KIA0KZG93bmxvYWRlZF9wYXRoID0gZG93bmxvYWRfbW9kZWwoJ2FpcG1vZGVscycsICJtb2RlbHMvbGluZWFyL2VtYWlsX3NwYW1fY2xhc3NpZmllcl8xYmYwMTJmNC0wYjg5LTQzMzgtYWUxMS00ZmEyZTQxMmFiMDMiKQ0KIA0KDQpAYXBwLnJvdXRlKCcvY2xhc3NpZmljYXRpb25faW5mZXInLCBtZXRob2RzPVsnUE9TVCddKQ0KZGVmIGNsYXNzaWZpZmNhdGlvbl9pbmZlcigpOg0KICAgIGlucHV0X2RhdGEgPSByZXF1ZXN0LmdldF9qc29uKCkNCiAgICBtb2RlbF9idW5kbGUgPSBqb2JsaWIubG9hZChkb3dubG9hZGVkX3BhdGgpDQogICAgcGlwZWxpbmUgPSBtb2RlbF9idW5kbGVbJ3BpcGVsaW5lJ10NCiAgICBsYWJlbF9lbmNvZGVyID0gbW9kZWxfYnVuZGxlWydsYWJlbF9lbmNvZGVyJ10NCiAgICBmZWF0dXJlX2xpc3QgPSBtb2RlbF9idW5kbGVbJ2ZlYXR1cmVzJ10NCiAgICANCiAgICBpbnB1dF9kZiA9IHBkLkRhdGFGcmFtZShbaW5wdXRfZGF0YV0pW2ZlYXR1cmVfbGlzdF0NCiAgICBwcmVkaWN0aW9uID0gcGlwZWxpbmUucHJlZGljdChpbnB1dF9kZikNCiAgICBwcmVkaXRlZF9zcGFtID0gbGFiZWxfZW5jb2Rlci5pbnZlcnNlX3RyYW5zZm9ybShwcmVkaWN0aW9uKVswXQ0KICAgIHJldHVybiBqc29uaWZ5KHsiSXMgU3BhbT8iOiBwcmVkaXRlZF9zcGFtfSkNCg0KDQpAYXBwLnJvdXRlKCcvdGVzdCcsIG1ldGhvZHM9WydHRVQnXSkNCmRlZiB0ZXN0KCk6DQogICAgcmV0dXJuIHsicmVzcG9uc2UiOiAiSW5mZXIgcnVubmluZyBzdWNjZXNzZnVsbHkifQ0KDQoNCmlmIF9fbmFtZV9fID09ICdfX21haW5fXyc6DQogICAgYXBwLnJ1bihkZWJ1Zz1GYWxzZSwgaG9zdD0nMC4wLjAuMCcsIHBvcnQgPSA4MDg2KQ0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KIA==","leo1311"
"LEOCLSFC94725","LEOCLSFC94725_leo1311.py","aW1wb3J0IHN0cmVhbWxpdCBhcyBzdA0KaW1wb3J0IHJlcXVlc3RzDQppbXBvcnQganNvbg0KaW1wb3J0IG9zDQoNCiMgQ2xhc3NpZmljYXRpb24gQVBJIGVuZHBvaW50DQpQT1NUX0FQSV9VUkxfQ0xBU1NJRklDQVRJT04gPSAiaHR0cDovLzEwMC43OC40OS4yMDo4MDg2L2NsYXNzaWZpY2F0aW9uX2luZmVyIg0KDQpzdC5zZXRfcGFnZV9jb25maWcocGFnZV90aXRsZT0iRW1haWwgQ2xhc3NpZmljYXRpb24gTW9kZWwiLCBsYXlvdXQ9ImNlbnRlcmVkIikNCnN0LnRpdGxlKCJFbWFpbCBDbGFzc2lmaWNhdGlvbiBNb2RlbCIpDQpzdC5tYXJrZG93bigiRW50ZXIgeW91ciBpbnB1dCBkYXRhIGluIEpTT04gZm9ybWF0LiIpDQoNCiMgSlNPTiBpbnB1dCBib3gNCmRhdGFfaW5wdXQgPSBzdC50ZXh0X2FyZWEoIklucHV0IiwgaGVpZ2h0PTIwMCwgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9J3tcbiAgIlN1YmplY3RfTGVuZ3RoIjogMzUsXG4gIk51bV9MaW5rcyI6IDEsXG4gICJOdW1fQXR0YWNobWVudHMiOiAwLFxuICAiU2VuZGVyX1JlcHV0YXRpb24iOiAiTG93IixcbiAgIkNvbnRhaW5zX1NwYW1fV29yZHMiOiAiTm8iXG59JykNCg0KIyBTdWJtaXQgYnV0dG9uDQppZiBzdC5idXR0b24oIlN1Ym1pdCIpOg0KICAgIGlmIGRhdGFfaW5wdXQuc3RyaXAoKToNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgZGF0YSA9IGpzb24ubG9hZHMoZGF0YV9pbnB1dCkNCiAgICAgICAgICAgIHJlc3BvbnNlID0gcmVxdWVzdHMucG9zdChQT1NUX0FQSV9VUkxfQ0xBU1NJRklDQVRJT04sIGpzb249ZGF0YSkNCiAgICAgICAgICAgIHJlc3BvbnNlLnJhaXNlX2Zvcl9zdGF0dXMoKQ0KDQogICAgICAgICAgICAjIFByZXR0eS1wcmludCByZXNwb25zZQ0KICAgICAgICAgICAgc3Quc3ViaGVhZGVyKCJBUEkgUmVzcG9uc2UiKQ0KICAgICAgICAgICAgc3QuanNvbihyZXNwb25zZS5qc29uKCkpDQoNCiAgICAgICAgZXhjZXB0IGpzb24uSlNPTkRlY29kZUVycm9yOg0KICAgICAgICAgICAgc3QuZXJyb3IoImludmFsaWQgSlNPTiBmb3JtYXQuIFBsZWFzZSBjaGVjayB5b3VyIGlucHV0LiIpDQogICAgICAgIGV4Y2VwdCByZXF1ZXN0cy5leGNlcHRpb25zLlJlcXVlc3RFeGNlcHRpb24gYXMgZToNCiAgICAgICAgICAgIHN0LmVycm9yKGYiQVBJIEVycm9yOiB7c3RyKGUpfSIpDQogICAgZWxzZToNCiAgICAgICAgc3Qud2FybmluZygiUGxlYXNlIGVudGVyIHNvbWUgaW5wdXQgZGF0YSBiZWZvcmUgc3VibWl0dGluZy4iKQ0KICAgICAgICANCg0KaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJzoNCiAgICBvcy5zeXN0ZW0oJ3B5dGhvbiAtbSBzdHJlYW1saXQgcnVuIExFT0NMU0ZDOTQ3MjVfbGVvMTMxMS5weSAtLXNlcnZlci5oZWFkbGVzcyB0cnVlIC0tc2VydmVyLnBvcnQgODA4NycpDQoNCg0KDQogDQo=","leo1311"
"LEORGNGS41180","LEORGNGS41180_leo1311.py","aW1wb3J0IGdyYWRpbyBhcyBncg0KZnJvbSBsYW5nY2hhaW4uY2hhaW5zIGltcG9ydCBSZXRyaWV2YWxRQQ0KZnJvbSBsYW5nY2hhaW4ucHJvbXB0cyBpbXBvcnQgUHJvbXB0VGVtcGxhdGUNCmZyb20gbGFuZ2NoYWluX29wZW5haSBpbXBvcnQgQXp1cmVDaGF0T3BlbkFJDQpmcm9tIGxhbmdjaGFpbl9vcGVuYWkuZW1iZWRkaW5ncyBpbXBvcnQgQXp1cmVPcGVuQUlFbWJlZGRpbmdzDQpmcm9tIGxhbmdjaGFpbi52ZWN0b3JzdG9yZXMgaW1wb3J0IFFkcmFudA0KZnJvbSBxZHJhbnRfY2xpZW50IGltcG9ydCBRZHJhbnRDbGllbnQNCmltcG9ydCBvcw0KIyBBY2Nlc3MgYW4gZW52aXJvbm1lbnQgdmFyaWFibGUNCmFwaV9rZXkgPSBvcy5nZXRlbnYoJ0FaVVJFX09QRU5BSV9LRVknKQ0KDQojIDEuIEF6dXJlIE9wZW5BSSBzZXR1cA0KbGxtID0gQXp1cmVDaGF0T3BlbkFJKA0KICAgIG1vZGVsPSJncHQtNG8tbWluaSIsDQogICAgYXp1cmVfZGVwbG95bWVudD0iZ3B0LTRvLW1pbmkiLA0KICAgIGFwaV9rZXk9YXBpX2tleSwNCiAgICBhenVyZV9lbmRwb2ludD0iaHR0cHM6Ly9haXBsYXRmb3JtLW9wZW5haS5vcGVuYWkuYXp1cmUuY29tLyIsDQogICAgYXBpX3ZlcnNpb249IjIwMjUtMDEtMDEtcHJldmlldyIsDQopDQoNCmVtYmVkZGluZ19tb2RlbCA9IEF6dXJlT3BlbkFJRW1iZWRkaW5ncygNCiAgICBtb2RlbD0idGV4dC1lbWJlZGRpbmctYWRhLTAwMiIsDQogICAgYXp1cmVfZGVwbG95bWVudD0idGV4dC1lbWJlZGRpbmctYWRhLTAwMiIsDQogICAgYXBpX2tleT1hcGlfa2V5LA0KICAgIGF6dXJlX2VuZHBvaW50PSJodHRwczovL2FpcGxhdGZvcm0tb3BlbmFpLm9wZW5haS5henVyZS5jb20vIiwNCiAgICBhcGlfdmVyc2lvbj0iMjAyNS0wMS0wMS1wcmV2aWV3IiwNCikNCg0KIyAyLiBMb2FkIGV4aXN0aW5nIHZlY3RvciBzdG9yZQ0KUURSQU5UX1VSTCA9IG9zLmVudmlyb24uZ2V0KCJRRFJBTlRfVVJMIikNClFEUkFOVF9QT1JUID0gNjMzMw0KQ09MTEVDVElPTl9OQU1FID0gInJhZy1kb2MtbGVhdmUtcG9saWN5Ig0KDQpjbGllbnQgPSBRZHJhbnRDbGllbnQodXJsPVFEUkFOVF9VUkwsIHBvcnQ9UURSQU5UX1BPUlQpDQp2ZWN0b3JzdG9yZSA9IFFkcmFudCgNCiAgICBjbGllbnQ9Y2xpZW50LA0KICAgIGNvbGxlY3Rpb25fbmFtZT1DT0xMRUNUSU9OX05BTUUsDQogICAgZW1iZWRkaW5ncz1lbWJlZGRpbmdfbW9kZWwNCikNCg0KDQojIDMuIFJldHJpZXZhbCBRQSBDaGFpbg0KcmV0cmlldmVyID0gdmVjdG9yc3RvcmUuYXNfcmV0cmlldmVyKHNlYXJjaF90eXBlPSJtbXIiLCBzZWFyY2hfa3dhcmdzPXsiayI6IDEwfSkNCg0KcHJvbXB0ID0gUHJvbXB0VGVtcGxhdGUoDQogICAgaW5wdXRfdmFyaWFibGVzPVsiY29udGV4dCIsICJxdWVzdGlvbiJdLA0KICAgIHRlbXBsYXRlPSIiIg0KVXNlIHRoZSBjb250ZXh0IGJlbG93IHRvIGFuc3dlciB0aGUgcXVlc3Rpb24gYWNjdXJhdGVseS4NCg0KQ29udGV4dDoNCntjb250ZXh0fQ0KDQpRdWVzdGlvbjoNCntxdWVzdGlvbn0NCg0KQW5zd2VyOiIiIg0KKQ0KDQpxYV9jaGFpbiA9IFJldHJpZXZhbFFBLmZyb21fY2hhaW5fdHlwZSgNCiAgICBsbG09bGxtLA0KICAgIHJldHJpZXZlcj1yZXRyaWV2ZXIsDQogICAgY2hhaW5fdHlwZT0ic3R1ZmYiLA0KICAgIGNoYWluX3R5cGVfa3dhcmdzPXsicHJvbXB0IjogcHJvbXB0fSwNCiAgICByZXR1cm5fc291cmNlX2RvY3VtZW50cz1UcnVlDQopDQoNCg0KaW1wb3J0IHN0cmVhbWxpdCBhcyBzdA0KaW1wb3J0IGpzb24NCmltcG9ydCByZXF1ZXN0cw0KDQojIEZ1bmN0aW9uIHRvIGhhbmRsZSB0aGUgcXVlc3Rpb24gYW5zd2VyaW5nDQpkZWYgYW5zd2VyX3F1ZXN0aW9uKHF1ZXJ5KToNCiAgICB0cnk6DQogICAgICAgIHJlc3VsdCA9IHFhX2NoYWluKHsicXVlcnkiOiBxdWVyeX0pDQogICAgICAgIHJldHVybiByZXN1bHRbInJlc3VsdCJdDQogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOg0KICAgICAgICByZXR1cm4gZiJFcnJvcjoge3N0cihlKX0iDQoNCiMgU3RyZWFtbGl0IGludGVyZmFjZSAobm8gJ21haW4nIG1ldGhvZCkNCnN0LnRpdGxlKCJSYWciKQ0KDQojIElucHV0IGZvciB0aGUgcXVlc3Rpb24NCnF1ZXN0aW9uX2lucHV0ID0gc3QudGV4dF9pbnB1dCgiRW50ZXIgeW91ciBxdWVzdGlvbiIpDQoNCiMgU3VibWl0IGJ1dHRvbg0KaWYgc3QuYnV0dG9uKCJTdWJtaXQiKToNCiAgICBpZiBxdWVzdGlvbl9pbnB1dC5zdHJpcCgpOg0KICAgICAgICB0cnk6DQogICAgICAgICAgICAjIENhbGwgdGhlIGFuc3dlcl9xdWVzdGlvbiBmdW5jdGlvbg0KICAgICAgICAgICAgYW5zd2VyID0gYW5zd2VyX3F1ZXN0aW9uKHF1ZXN0aW9uX2lucHV0KQ0KDQogICAgICAgICAgICAjIERpc3BsYXkgdGhlIHJlc3BvbnNlDQogICAgICAgICAgICBzdC50ZXh0X2FyZWEoIkFuc3dlciIsIHZhbHVlPWFuc3dlciwgaGVpZ2h0PTIwMCkNCg0KICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6DQogICAgICAgICAgICBzdC5lcnJvcihmIkVycm9yOiB7c3RyKGUpfSIpDQoNCiAgICBlbHNlOg0KICAgICAgICBzdC5lcnJvcigiUGxlYXNlIGVudGVyIGEgcXVlc3Rpb24uIikNCg0KDQppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOg0KICAgIG9zLnN5c3RlbSgncHl0aG9uIC1tIHN0cmVhbWxpdCBydW4gTEVPUkdOR1M0MTE4MF9sZW8xMzExLnB5IC0tc2VydmVyLmhlYWRsZXNzIHRydWUgLS1zZXJ2ZXIucG9ydCA4MDAwJykgICAgDQoNCg0KDQoNCg0KDQoNCg0KDQoNCg0KIA0K","leo1311"
"LEORGNGS24627","LEORGNGS24627_leo1311.py","","leo1311"
