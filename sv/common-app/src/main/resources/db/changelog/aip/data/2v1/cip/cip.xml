<?xml version="1.1" encoding="UTF-8" standalone="no"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext" xmlns:pro="http://www.liquibase.org/xml/ns/pro" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/pro http://www.liquibase.org/xml/ns/pro/liquibase-pro-4.1.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.1.xsd">
	<changeSet author="Leap (generated)" id="2v1-cip-103">
        <loadData commentLineStartsWith="#" encoding="UTF-8" file="db/changelog/aip/data/2v1/cip/mlschemaregistry.csv" quotchar="&quot;" separator="," tableName="mlschemaregistry">
            <column header="id" name="id" type="NUMERIC"/>
            <column header="formtemplate" name="formtemplate" type="STRING"/>
            <column header="name" name="name" type="STRING"/>
            <column header="organization" name="organization" type="STRING"/>
            <column header="schemavalue" name="schemavalue" type="STRING"/>
       	    <column header="lastmodifiedby" name="lastmodifiedby" type="STRING"/>
            <column header="lastmodifieddate" name="lastmodifieddate" type="DATE"/>
            <column header="alias" name="alias" type="STRING"/>
        </loadData>
    </changeSet>
	<changeSet dbms="mssql,h2" author="Leap (generated)" id="2v1-cip-106">
        <loadData commentLineStartsWith="#" encoding="UTF-8" file="db/changelog/aip/data/2v1/cip/mldatasource.csv" quotchar="&quot;" separator="," tableName="mldatasource">
            <column header="id" name="id" type="NUMERIC"/>
            <column header="connectiondetails" name="connectiondetails" type="STRING"/>
            <column header="description" name="description" type="STRING"/>
            <column header="dshashcode" name="dshashcode" type="STRING"/>
            <column header="name" name="name" type="STRING"/>
            <column header="organization" name="organization" type="STRING"/>
            <column header="salt" name="salt" type="STRING"/>
            <column header="type" name="type" type="STRING"/>
            <column header="category" name="category" type="STRING"/>
            <column header="activetime" name="activetime" type="skip"/>
            <column header="lastmodifiedby" name="lastmodifiedby" type="STRING"/>
            <column header="lastmodifieddate" name="lastmodifieddate" type="DATE"/>
            <column header="alias" name="alias" type="STRING"/>
        </loadData>
    </changeSet>
	<changeSet author="Leap (generated)" id="2v1-cip-101">
        <loadData commentLineStartsWith="#" encoding="UTF-8" file="db/changelog/aip/data/2v1/cip/mldataset.csv" quotchar="&quot;" separator="," tableName="mldataset">
            <column header="id" name="id" type="NUMERIC"/>
            <column header="name" name="name" type="STRING"/>
            <column header="alias" name="alias" type="STRING"/>
            <column header="description" name="description" type="STRING"/>
            <column header="attributes" name="attributes" type="STRING"/>
            <column header="exp_status" name="exp_status" type="NUMERIC"/>
            <column header="organization" name="organization" type="STRING"/>
            <column header="schemajson" name="schemajson" type="STRING"/>
            <column header="type" name="type" type="STRING"/>
            <column header="backing_dataset" name="backing_dataset" type="skip"/>
            <column header="dataset_schema" name="dataset_schema" type="STRING"/>
            <column header="datasource" name="datasource" type="STRING"/>
            <column header="lastmodifiedby" name="lastmodifiedby" type="STRING"/>
            <column header="lastmodifieddate" name="lastmodifieddate" type="DATE"/>
            <column header="views" name="views" type="STRING"/>
            <column name="is_inbox_required" defaultValueBoolean="false"
				type="boolean" />
			<column name="is_audit_required" defaultValueBoolean="false"
				type="boolean" />
        </loadData>
    </changeSet> 
    <changeSet author="Leap" id="2v1-cip-366347">
	<sql dbms="mysql,mssql,h2" splitStatements="true" stripComments="true">  
		DELETE FROM mlpipeline WHERE name='ClusterClassification_Training' AND organization='leo1311';
	</sql>			
</changeSet>
 <changeSet author="Leap" id="2v1-cip-366348">
	<sql dbms="mysql,mssql,h2" splitStatements="true" stripComments="true">  
		DELETE FROM mlpipeline WHERE name='LEOINVRT15668' AND organization='leo1311';
	</sql>			
</changeSet> 
<changeSet author="Leap" id="2v1-cip-366350">
    <sql dbms="mysql,mssql,h2" splitStatements="true" stripComments="true">  
        DELETE FROM mlpipeline WHERE name='SNOW_Update_API' AND organization='leo1311';
    </sql>            
</changeSet> 
<changeSet author="Leap" id="2v1-cip-366353">
    <sql dbms="mysql,h2,postgresql" splitStatements="true" stripComments="true">  
        DELETE FROM mlpipeline WHERE name='ACMATSGN51350' AND organization='leo1311';
    </sql>            
</changeSet>
<changeSet author="Leap" id="2v1-cip-366354">
    <sql dbms="mssql,h2" splitStatements="true" stripComments="true">  
        DELETE FROM mlpipeline WHERE name='ACMATSGN51350' AND organization='leo1311';
    </sql>            
</changeSet>
	<changeSet author="Leap (generated)" id="2v1-cip-102">
        <loadData commentLineStartsWith="#" encoding="UTF-8" file="db/changelog/aip/data/2v1/cip/mlpipeline.csv" quotchar="&quot;" separator="," tableName="mlpipeline">
            <column header="cid" name="cid" type="NUMERIC"/>
            <column header="created_by" name="created_by" type="STRING"/>
            <column header="created_date" name="created_date" type="datetime(6)"/>
            <column header="deleted" name="deleted" type="BOOLEAN"/>
            <column header="description" name="description" type="STRING"/>
            <column header="job_id" name="job_id" type="skip"/>
            <column header="json_content" name="json_content" type="STRING"/>
            <column header="lastmodifiedby" name="lastmodifiedby" type="STRING"/>
            <column header="alias" name="alias" type="STRING"/>
            <column header="lastmodifieddate" name="lastmodifieddate" type="datetime"/>
            <column header="name" name="name" type="STRING"/>
            <column header="organization" name="organization" type="STRING"/>
            <column header="type" name="type" type="STRING"/>
            <column header="version" name="version" type="skip"/>
        </loadData>
    </changeSet>
    
	
	<changeSet author="Leap (generated)" id="2v1-cip-104">
        <loadData commentLineStartsWith="#" encoding="UTF-8" file="db/changelog/aip/data/2v1/cip/mlgroupmodel.csv" quotchar="&quot;" separator="," tableName="mlgroupmodel">
            <column header="id" name="id" type="NUMERIC"/>
            <column header="entity" name="entity" type="STRING"/>
            <column header="entity_type" name="entity_type" type="STRING"/>
            <column header="model_group" name="model_group" type="STRING"/>
            <column header="organization" name="organization" type="STRING"/>
        </loadData>
    </changeSet>
    <changeSet author="Leap" id="2v1-cip-366340">
	<sql dbms="mysql,mssql" splitStatements="true" stripComments="true">  
		DELETE FROM mlpipelinenativescriptentity WHERE cname='SNOW_Update_API' AND organization='leo1311';
       </sql>			
</changeSet>
<changeSet author="Leap" id="2v1-cip-366359">
	<sql dbms="mysql,h2,postgresql" splitStatements="true" stripComments="true">  
		DELETE FROM mlpipelinenativescriptentity WHERE cname='ACMKYPHR40814' AND organization='leo1311';
    </sql>			
</changeSet>
	<changeSet dbms="mysql,h2,postgresql" author="Leap (generated)" id="2v1-cip-105">
        <loadData commentLineStartsWith="#" encoding="UTF-8" file="db/changelog/aip/data/2v1/cip/mlpipelinenativescriptentity.csv" quotchar="&quot;" separator="," tableName="mlpipelinenativescriptentity">
            <column header="id" name="id" type="NUMERIC"/>
            <column header="cname" name="cname" type="STRING"/>
            <column header="filename" name="filename" type="STRING"/>
            <column header="filescript" name="filescript" type="BLOB"/>
            <column header="organization" name="organization" type="STRING"/>
        </loadData>
    </changeSet>
     <changeSet author="Leap" id="2v1-cip-366323">
		<sql dbms="mysql,h2,postgresql" splitStatements="true" stripComments="true">  
			UPDATE mlpipeline SET json_content='{\"elements\":[{\"id\":\"niQTO\",\"alias\":\"Python  Script  Transformer\",\"name\":\"Python  Script  Transformer\",\"classname\":\"PythonScriptTransformerConfig\",\"category\":\"TransformerConfig\",\"attributes\":{\"script\":[\"import logging\\r\",\"from pyspark.sql import SparkSession\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, df):\\r\",\"        # spark = SparkSession.builder\\\\\\r\",\"        #         .master(\'local[*]\')\\\\\\r\",\"        #         .appName(\'PySpark_Tutorial\')\\\\\\r\",\"        #         .getOrCreate()\\r\",\"        #csv_file = \'roaster.csv\'\\r\",\"        #df = spark.read.csv(csv_file,sep = \',\',header=True)\\r\",\"        df.show()\\r\",\"        df = df.select(col(\'NAME\').alias(\'Name\'),col(\'track\').alias(\'Track\'),col(\'shift\').alias(\'Shift\'),col(\'DATE\').alias(\'Date\'))\\r\",\"        # namesList = df.select(\'Name\').collect()\\r\",\"        # trackList = df.select(\'Track\').collect()\\r\",\"        # datesList = df.columns[2:]\\r\",\"        # # print(datesList)\\r\",\"        # # for i in range(0,len(namesList)):\\r\",\"        # # print(namesList[i])\\r\",\"        # final_list = []\\r\",\"        # for i in range(0,len(datesList)):\\r\",\"        #   currShiftList = df.select(datesList[i]).collect()\\r\",\"        #   for j in range(0,len(currShiftList)):\\r\",\"        #     # print(type(currShiftList[j]))\\r\",\"        #     if(currShiftList[j][datesList[i]] != None):\\r\",\"        #       final_list.append((namesList[j],trackList[j],currShiftList[j][datesList[i]],datesList[i]))\\r\",\"        # # for i in final_list:\\r\",\"        # #   print(i)\\r\",\"\\r\",\"        # # print(final_list)\\r\",\"\\r\",\"        # finalListColumns = [\'Name\',\'Track\',\'Shift\',\'Date\']\\r\",\"        # finalDf = spark.createDataFrame(data=final_list)\\r\",\"        # #finalDf = finalDf.withColumn(\'Name\',f.concat_ws(\',\', col(\'Name\')))\\r\",\"        # name_udf = udf(lambda x: \',\'.join(x))\\r\",\"        # track_udf = udf(lambda x: \',\'.join(x))\\r\",\"        # finalDf = finalDf.withColumn(\'Name\', name_udf(col(\'Name\')))\\r\",\"        # finalDf = finalDf.withColumn(\'Track\', track_udf(col(\'Track\')))\\r\",\"        # finalDf.printSchema()\\r\",\"        # finalDf.show()    \\r\",\"        return df\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"]},\"position_x\":\"480\",\"position_y\":\"150\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"jFjPn\",\"elementPosition\":\"LeftMiddle\"},{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"YeXsn\",\"elementPosition\":\"RightMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"script\":\"textarea\"},\"context\":[{\"dataset\":{\"alias\":\"Roster Data\",\"name\":\"56F6JV9XIB\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-11-11 09:52:57\",\"alias\":\"Roster File\",\"id\":39,\"name\":\"LEOLRLFL33294\",\"description\":\"\",\"type\":\"FILE\",\"connectionDetails\":\"{}\",\"salt\":null,\"organization\":\"leo1311\",\"dshashcode\":null,\"activetime\":null,\"category\":\"FILE\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"csv_separator\":\",\",\"bucketName\":\"leo1311\",\"fileName\":\"roster.csv\",\"file\":\"\",\"extraParams\":\"\",\"fileId\":\"filedatasetYY2022MM7DD7EE14c6549630124b16b7419baff25f4fd7\",\"path\":\"/app/uploads\",\"fileFormat\":\"CSV\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"groups\":[]},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"YeXsn\",\"alias\":\"Roster Data\",\"name\":\"Dataset  Extractor\",\"classname\":\"DatasetExtractorConfig\",\"category\":\"ExtractorConfig\",\"attributes\":{\"dataset\":{\"alias\":\"Roster Data\",\"name\":\"56F6JV9XIB\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-11-11 09:52:57\",\"alias\":\"Roster File\",\"id\":39,\"name\":\"LEOLRLFL33294\",\"description\":\"\",\"type\":\"FILE\",\"connectionDetails\":\"{}\",\"salt\":null,\"organization\":\"leo1311\",\"dshashcode\":null,\"activetime\":null,\"category\":\"FILE\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"csv_separator\":\",\",\"bucketName\":\"leo1311\",\"fileName\":\"roster.csv\",\"file\":\"\",\"extraParams\":\"\",\"fileId\":\"filedatasetYY2022MM7DD7EE14c6549630124b16b7419baff25f4fd7\",\"path\":\"/app/uploads\",\"fileFormat\":\"CSV\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"groups\":[]},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},\"position_x\":\"250\",\"position_y\":\"150\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"niQTO\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"isValidation\":\"checkbox\",\"samplingRatio\":\"text\",\"applySchema\":\"checkbox\"},\"context\":[]},{\"id\":\"jFjPn\",\"alias\":\"Transformed Roster\",\"name\":\"Dataset  Loader\",\"classname\":\"DatasetLoaderConfig\",\"category\":\"LoaderConfig\",\"attributes\":{\"dataset\":{\"alias\":\"Transformed Roster\",\"name\":\"PM16RBIBZ1\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2022-07-07 07:50:26\",\"alias\":\"Shift Roster\",\"id\":38,\"name\":\"LEOLRLLL53151\",\"description\":\"\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"enclyfl+gjf1gnVe/eXqCnXk4BKvkApRHJCz5s=\\\",\\\"userName\\\":\\\"leapadmin\\\",\\\"url\\\":\\\"jdbc:mysql://10.85.12.136:3306/loreal\\\"}\",\"salt\":\"WtN07Xx6DyXPbmZ8mI6As2oFR7W3Kctah2FvIp32rXNBiPmB4qqiJMpr7adykhgenZ1U/iwUqk3AswQuOThA6w==\",\"organization\":\"leo1311\",\"dshashcode\":\"4c5f680a957e83fd97ca2661b1984833937b70304518d1ee408a613eeb122047\",\"activetime\":\"2022-07-07 07:50:26\",\"category\":\"SQL\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from finalrosterdata\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"finalrosterdata\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"backingDataset\":null,\"organization\":\"leo1311\"},\"applySchema\":false},\"position_x\":\"720\",\"position_y\":\"150\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"niQTO\",\"elementPosition\":\"RightMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"applySchema\":\"checkbox\"},\"context\":[{\"script\":[\"import logging\\r\",\"from pyspark.sql import SparkSession\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, df):\\r\",\"        # spark = SparkSession.builder\\\\\\r\",\"        #         .master(\'local[*]\')\\\\\\r\",\"        #         .appName(\'PySpark_Tutorial\')\\\\\\r\",\"        #         .getOrCreate()\\r\",\"        #csv_file = \'roaster.csv\'\\r\",\"        #df = spark.read.csv(csv_file,sep = \',\',header=True)\\r\",\"        df.show()\\r\",\"        df = df.select(col(\'NAME\').alias(\'Name\'),col(\'track\').alias(\'Track\'),col(\'shift\').alias(\'Shift\'),col(\'DATE\').alias(\'Date\'))\\r\",\"        # namesList = df.select(\'Name\').collect()\\r\",\"        # trackList = df.select(\'Track\').collect()\\r\",\"        # datesList = df.columns[2:]\\r\",\"        # # print(datesList)\\r\",\"        # # for i in range(0,len(namesList)):\\r\",\"        # # print(namesList[i])\\r\",\"        # final_list = []\\r\",\"        # for i in range(0,len(datesList)):\\r\",\"        #   currShiftList = df.select(datesList[i]).collect()\\r\",\"        #   for j in range(0,len(currShiftList)):\\r\",\"        #     # print(type(currShiftList[j]))\\r\",\"        #     if(currShiftList[j][datesList[i]] != None):\\r\",\"        #       final_list.append((namesList[j],trackList[j],currShiftList[j][datesList[i]],datesList[i]))\\r\",\"        # # for i in final_list:\\r\",\"        # #   print(i)\\r\",\"\\r\",\"        # # print(final_list)\\r\",\"\\r\",\"        # finalListColumns = [\'Name\',\'Track\',\'Shift\',\'Date\']\\r\",\"        # finalDf = spark.createDataFrame(data=final_list)\\r\",\"        # #finalDf = finalDf.withColumn(\'Name\',f.concat_ws(\',\', col(\'Name\')))\\r\",\"        # name_udf = udf(lambda x: \',\'.join(x))\\r\",\"        # track_udf = udf(lambda x: \',\'.join(x))\\r\",\"        # finalDf = finalDf.withColumn(\'Name\', name_udf(col(\'Name\')))\\r\",\"        # finalDf = finalDf.withColumn(\'Track\', track_udf(col(\'Track\')))\\r\",\"        # finalDf.printSchema()\\r\",\"        # finalDf.show()    \\r\",\"        return df\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"]},{\"dataset\":{\"alias\":\"Roster Data\",\"name\":\"56F6JV9XIB\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-11-11 09:52:57\",\"alias\":\"Roster File\",\"id\":39,\"name\":\"LEOLRLFL33294\",\"description\":\"\",\"type\":\"FILE\",\"connectionDetails\":\"{}\",\"salt\":null,\"organization\":\"leo1311\",\"dshashcode\":null,\"activetime\":null,\"category\":\"FILE\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"csv_separator\":\",\",\"bucketName\":\"leo1311\",\"fileName\":\"roster.csv\",\"file\":\"\",\"extraParams\":\"\",\"fileId\":\"filedatasetYY2022MM7DD7EE14c6549630124b16b7419baff25f4fd7\",\"path\":\"/app/uploads\",\"fileFormat\":\"CSV\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"groups\":[]},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]}]}' WHERE name='LEORSTRT74119' AND organization='leo1311';
			UPDATE mlpipeline SET json_content='{\"elements\":[{\"id\":\"KBFha\",\"alias\":\"Pre  Processing  Script\",\"name\":\"Pre  Processing  Script\",\"classname\":\"PreProcessingScriptConfig\",\"category\":\"BaseConfig\",\"attributes\":{\"params\":\"{\\\"IncidentId\\\":\\\"\\\"}\",\"script\":[\"import logging as logger\\r\",\"from datetime import datetime\\r\",\"from pyspark.sql import SparkSession\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"import datetime\\r\",\"import time\\r\",\"import pandas as pd\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, df1, df2, df3):\\r\",\"        incidentId = self.params[\'IncidentId\']\\r\",\"        if incidentId !=\'\':\\r\",\"            df1 = df1.filter(df1[\'Number\'] == incidentId)\\r\",\"        \\r\",\"        spark = SparkSession.builder.master(\'local[*]\').appName(\'ShiftRosterAssignment\').getOrCreate()\\r\",\"\\r\",\"        def assignTicket(empWithNoOfTickets, priority, tech, ticketAssignedToNextShift,ticketWeight):\\r\",\"            \\r\",\"            print(\'Assigning tickets for\', tech[0],priority[0],\'Open\')\\r\",\"            try:\\r\",\"           \\r\",\"                ticketdf = df1.filter(\\r\",\"                    (df1[\'Category\'] == tech[0]) &amp; (df1[\'Priority\'] == priority[0]) &amp; (df1[\'State\'] == \'New\'))\\r\",\"                #ticketdf = ticketdf.where(col(\'Assignee\').isNull())\\r\",\"                \\r\",\"                #Change Assignee to Null instead of ,,\\r\",\"                currPointer=0\\r\",\"                ticketAssigned = {}\\r\",\"               \\r\",\"                if(ticketdf.count()>0):\\r\",\"                    print(\'Assigning tickets to employees for \', priority[0], \' priority and \', tech[0], \'tech\')\\r\",\"                else:\\r\",\"                    print(\'No tickets to assign for \', priority[0], \' priority and \', tech[0], \'tech\')\\r\",\"                for i in ticketdf.collect():\\r\",\"                    \\r\",\"                    empWithNoOfTickets.sort(key=lambda empWithNoOfTickets: empWithNoOfTickets[0])\\r\",\"                    \\r\",\"                    #use min instead of sort\\r\",\"                    # i[3] = \'Open\'\\r\",\"                    \\r\",\"                    \\r\",\"                    \\r\",\"                    if empWithNoOfTickets[currPointer][1] in ticketAssigned.keys():\\r\",\"                        print([i[0],i[1],i[2],i[3],i[4],i[5],empWithNoOfTickets[currPointer][1]])\\r\",\"                        ticketAssigned[empWithNoOfTickets[currPointer][1]].append([i[0],i[1],i[2],i[3],i[4],i[5],empWithNoOfTickets[currPointer][1]])\\r\",\"                    else:\\r\",\"                        \\r\",\"                        \\r\",\"                        print([[i[0],i[1],i[2],i[3],i[4],i[5],empWithNoOfTickets[currPointer][1]]])\\r\",\"                        ticketAssigned[empWithNoOfTickets[currPointer][1]] = [[i[0],i[1],i[2],i[3],i[4],i[5],empWithNoOfTickets[currPointer][1]]]\\r\",\"                        print(ticketAssigned)\\r\",\"                    \\r\",\"                    ticketAssignedToNextShift.append([i[0], i[1], i[2], i[3], i[4], i[5], empWithNoOfTickets[currPointer][1]])\\r\",\"                    print(ticketWeight[priority[0]])\\r\",\"                    empWithNoOfTickets[currPointer][0]+=(ticketWeight[priority[0]]/len(empListInNextShift))\\r\",\"                    #print(empWithNoOfTickets,i[2])\\r\",\"                    \\r\",\"                return ticketAssignedToNextShift\\r\",\"            except ex:\\r\",\"                return \'\'\\r\",\"\\r\",\"\\r\",\"        trackList = df2.select(\'track\').distinct().collect()\\r\",\"        priorityList = df1.select(\'Priority\').distinct().collect()\\r\",\"        priorityList.sort()\\r\",\"\\r\",\"        empListdf = df2.groupBy(\'track\', \'shift\').agg(array_distinct(collect_list(\'Name\')).alias(\'EmpInTech\'),\\r\",\"                                                      first(\'shiftStart\').alias(\'shiftStart\'),\\r\",\"                                                      first(\'shiftEnd\').alias(\'shiftEnd\'),\\r\",\"                                                      first(\'reassignAt\').alias(\'reassignAt\'),\\r\",\"                                                      first(\'reassignedShift\').alias(\'reassignedShift\'))\\r\",\"        empListdf = empListdf.withColumn(\'EmpInTechSize\', size(\'EmpInTech\'))\\r\",\"\\r\",\"        current_time = datetime.datetime.now().time().strftime(\'%H:%M:%S\')\\r\",\"        # Logic for adding shift in db?\\r\",\"        shiftsdf = df2.select(\'shift\', \'shiftStart\', \'shiftEnd\', \'reassignedShift\').distinct()\\r\",\"\\r\",\"        cons_shift = shiftsdf.filter((shiftsdf[\'shiftStart\'] &lt;= current_time) &amp;(shiftsdf[\'shiftEnd\'] > current_time)).select(col(\'shift\').alias(\'current_shift\'), col(\'reassignedShift\').alias(\'next_shift\')).collect()\\r\",\"\\r\",\"        ticketAssignedToNextShift=[]\\r\",\"        ticketWeight = {}\\r\",\"        #for converting weight df to dict\\r\",\"        for priority in priorityList:\\r\",\"            try:\\r\",\"                weightageList = df3.filter((df3[\'Priority\'] == priority[0])).select(\'Weight\').collect()\\r\",\"                ticketWeight[priority[0]] = int(weightageList[0][0])\\r\",\"                print(\'Abc\')\\r\",\"                print(weightageList)\\r\",\"                print(priority)\\r\",\"            except:\\r\",\"                a=1\\r\",\"\\r\",\"        Assigneddata = []\\r\",\"\\r\",\"        for tech in trackList:\\r\",\"            try:\\r\",\"               # print(\'Fetching employees in next shift for \', tech[0], cons_shift[0][\'next_shift\'])\\r\",\"                if len(cons_shift) &lt;= 0:\\r\",\"                    print(\'No employees in next shift for tech \', tech[0])\\r\",\"                else:\\r\",\"                        \\r\",\"                    empInNextShift = empListdf.filter((empListdf[\'Track\'] == tech[0]) &amp;(empListdf[\'shift\'] == cons_shift[0][\'next_shift\']))\\r\",\"                    if empInNextShift.count()&lt;=0:\\r\",\"                        print(\'No employees in next shift for tech \', tech[0])\\r\",\"                    else:\\r\",\"                        empListInNextShift = empInNextShift.select(explode(\'EmpInTech\').alias(\'EmpInTech\')).collect()\\r\",\"        \\r\",\"                        empWithNoOfTickets = []\\r\",\"                        for priority in priorityList:\\r\",\"                            for emp in empListInNextShift:\\r\",\"        \\r\",\"                                empInList = any(emp[0] in sublist[1] for sublist in empWithNoOfTickets)\\r\",\"                                if(not empInList):\\r\",\"                                    intitalWeight =0\\r\",\"                                    empWithNoOfTickets.append([intitalWeight, emp[0]])\\r\",\"                            Assigneddata = assignTicket(empWithNoOfTickets, priority, tech, ticketAssignedToNextShift,ticketWeight)\\r\",\"            except:\\r\",\"                a=1\\r\",\"\\r\",\"\\r\",\"        if(len(Assigneddata)>0):\\r\",\"            headers = [\'Number\', \'Category\', \'Priority\', \'State\', \'Subject\', \'cleanText\', \'Assignee\']\\r\",\"            updated = spark.createDataFrame(Assigneddata, headers)\\r\",\"            updated = updated.withColumn(\'Shift\',lit(None).cast(StringType()))\\r\",\"            print(\'Assignment completed\')\\r\",\"            updated.show()\\r\",\"            \\r\",\"            return updated\\r\",\"        else:\\r\",\"            return df1\\r\",\"\\r\"]},\"position_x\":\"360\",\"position_y\":\"150\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"vXYyO\",\"elementPosition\":\"LeftMiddle\"},{\"type\":\"target\",\"endpoint\":\"dataset2\",\"position\":\"TopCenter\",\"elementId\":\"BRFGq\",\"elementPosition\":\"RightMiddle\"},{\"type\":\"target\",\"endpoint\":\"dataset1\",\"position\":\"LeftMiddle\",\"elementId\":\"yPwNy\",\"elementPosition\":\"RightMiddle\"},{\"type\":\"target\",\"endpoint\":\"dataset3\",\"position\":\"BottomCenter\",\"elementId\":\"NsExs\",\"elementPosition\":\"RightMiddle\"}],\"inputEndpoints\":[\"dataset1\",\"dataset2\",\"dataset3\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"params\":\"textarea\",\"script\":\"textarea\"},\"context\":[{\"dataset\":{\"alias\":\"Roster data\",\"name\":\"VGK07GPIRW\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 07:03:18\",\"alias\":\"leo1311\",\"id\":15,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"@datasourcepass\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"@datasourceuser\\\",\\\"url\\\":\\\"@datasourceurl/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT NAME,track,shift,STR_TO_DATE(DATE, \'%m/%d/%Y\') AS DATE,userAvailable,shiftStart,shiftEnd,reassignAt,reassignedShift FROM @projectname_useravailability roster\\n JOIN @projectname_rosterdefinition def ON def.shiftName=roster.shift WHERE STR_TO_DATE(DATE, \'%m/%d/%Y\')=CURRENT_DATE AND userAvailable=1\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"groups\":[]},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},{\"dataset\":{\"alias\":\"Classified Tickets\",\"name\":\"SACUEMTW8R\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 07:03:18\",\"alias\":\"leo1311\",\"id\":15,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"@datasourcepass\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"@datasourceuser\\\",\\\"url\\\":\\\"@datasourceurl/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from @projectname_techclassifiedtickets\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"@projectname_techclassifiedtickets\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"groups\":[]},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},{\"dataset\":{\"alias\":\"Ticket Weightage\",\"name\":\"3XV2PZ4WB3\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 07:03:18\",\"alias\":\"leo1311\",\"id\":15,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"@datasourcepass\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"@datasourceuser\\\",\\\"url\\\":\\\"@datasourceurl/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from @projectname_priorityweightage\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"@projectname_priorityweightage\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"groups\":[]},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"vXYyO\",\"alias\":\"Python  Script  Transformer\",\"name\":\"Python  Script  Transformer\",\"classname\":\"PythonScriptTransformerConfig\",\"category\":\"TransformerConfig\",\"attributes\":{\"script\":[\"import logging\\r\",\"import datetime\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        dataset = dataset.select(col(\'Number\').alias(\'number\'),col(\'Assignee\').alias(\'predicted_assignee\'))\\r\",\"        dataset = dataset.withColumn(\'last_updated\',lit(datetime.datetime.now()))\\r\",\"        return dataset\\r\"]},\"position_x\":\"620\",\"position_y\":\"150\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"KBFha\",\"elementPosition\":\"RightMiddle\"},{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"ugjxL\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"script\":\"textarea\"},\"context\":[{\"params\":\"{\\\"IncidentId\\\":\\\"\\\"}\",\"script\":[\"import logging as logger\\r\",\"from datetime import datetime\\r\",\"from pyspark.sql import SparkSession\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"import datetime\\r\",\"import time\\r\",\"import pandas as pd\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, df1, df2, df3):\\r\",\"        incidentId = self.params[\'IncidentId\']\\r\",\"        if incidentId !=\'\':\\r\",\"            df1 = df1.filter(df1[\'Number\'] == incidentId)\\r\",\"        \\r\",\"        spark = SparkSession.builder.master(\'local[*]\').appName(\'ShiftRosterAssignment\').getOrCreate()\\r\",\"\\r\",\"        def assignTicket(empWithNoOfTickets, priority, tech, ticketAssignedToNextShift,ticketWeight):\\r\",\"            \\r\",\"            print(\'Assigning tickets for\', tech[0],priority[0],\'Open\')\\r\",\"            try:\\r\",\"           \\r\",\"                ticketdf = df1.filter(\\r\",\"                    (df1[\'Category\'] == tech[0]) &amp; (df1[\'Priority\'] == priority[0]) &amp; (df1[\'State\'] == \'New\'))\\r\",\"                #ticketdf = ticketdf.where(col(\'Assignee\').isNull())\\r\",\"                \\r\",\"                #Change Assignee to Null instead of ,,\\r\",\"                currPointer=0\\r\",\"                ticketAssigned = {}\\r\",\"               \\r\",\"                if(ticketdf.count()>0):\\r\",\"                    print(\'Assigning tickets to employees for \', priority[0], \' priority and \', tech[0], \'tech\')\\r\",\"                else:\\r\",\"                    print(\'No tickets to assign for \', priority[0], \' priority and \', tech[0], \'tech\')\\r\",\"                for i in ticketdf.collect():\\r\",\"                    \\r\",\"                    empWithNoOfTickets.sort(key=lambda empWithNoOfTickets: empWithNoOfTickets[0])\\r\",\"                    \\r\",\"                    #use min instead of sort\\r\",\"                    # i[3] = \'Open\'\\r\",\"                    \\r\",\"                    \\r\",\"                    \\r\",\"                    if empWithNoOfTickets[currPointer][1] in ticketAssigned.keys():\\r\",\"                        print([i[0],i[1],i[2],i[3],i[4],i[5],empWithNoOfTickets[currPointer][1]])\\r\",\"                        ticketAssigned[empWithNoOfTickets[currPointer][1]].append([i[0],i[1],i[2],i[3],i[4],i[5],empWithNoOfTickets[currPointer][1]])\\r\",\"                    else:\\r\",\"                        \\r\",\"                        \\r\",\"                        print([[i[0],i[1],i[2],i[3],i[4],i[5],empWithNoOfTickets[currPointer][1]]])\\r\",\"                        ticketAssigned[empWithNoOfTickets[currPointer][1]] = [[i[0],i[1],i[2],i[3],i[4],i[5],empWithNoOfTickets[currPointer][1]]]\\r\",\"                        print(ticketAssigned)\\r\",\"                    \\r\",\"                    ticketAssignedToNextShift.append([i[0], i[1], i[2], i[3], i[4], i[5], empWithNoOfTickets[currPointer][1]])\\r\",\"                    print(ticketWeight[priority[0]])\\r\",\"                    empWithNoOfTickets[currPointer][0]+=(ticketWeight[priority[0]]/len(empListInNextShift))\\r\",\"                    #print(empWithNoOfTickets,i[2])\\r\",\"                    \\r\",\"                return ticketAssignedToNextShift\\r\",\"            except ex:\\r\",\"                return \'\'\\r\",\"\\r\",\"\\r\",\"        trackList = df2.select(\'track\').distinct().collect()\\r\",\"        priorityList = df1.select(\'Priority\').distinct().collect()\\r\",\"        priorityList.sort()\\r\",\"\\r\",\"        empListdf = df2.groupBy(\'track\', \'shift\').agg(array_distinct(collect_list(\'Name\')).alias(\'EmpInTech\'),\\r\",\"                                                      first(\'shiftStart\').alias(\'shiftStart\'),\\r\",\"                                                      first(\'shiftEnd\').alias(\'shiftEnd\'),\\r\",\"                                                      first(\'reassignAt\').alias(\'reassignAt\'),\\r\",\"                                                      first(\'reassignedShift\').alias(\'reassignedShift\'))\\r\",\"        empListdf = empListdf.withColumn(\'EmpInTechSize\', size(\'EmpInTech\'))\\r\",\"\\r\",\"        current_time = datetime.datetime.now().time().strftime(\'%H:%M:%S\')\\r\",\"        # Logic for adding shift in db?\\r\",\"        shiftsdf = df2.select(\'shift\', \'shiftStart\', \'shiftEnd\', \'reassignedShift\').distinct()\\r\",\"\\r\",\"        cons_shift = shiftsdf.filter((shiftsdf[\'shiftStart\'] &lt;= current_time) &amp;(shiftsdf[\'shiftEnd\'] > current_time)).select(col(\'shift\').alias(\'current_shift\'), col(\'reassignedShift\').alias(\'next_shift\')).collect()\\r\",\"\\r\",\"        ticketAssignedToNextShift=[]\\r\",\"        ticketWeight = {}\\r\",\"        #for converting weight df to dict\\r\",\"        for priority in priorityList:\\r\",\"            try:\\r\",\"                weightageList = df3.filter((df3[\'Priority\'] == priority[0])).select(\'Weight\').collect()\\r\",\"                ticketWeight[priority[0]] = int(weightageList[0][0])\\r\",\"                print(\'Abc\')\\r\",\"                print(weightageList)\\r\",\"                print(priority)\\r\",\"            except:\\r\",\"                a=1\\r\",\"\\r\",\"        Assigneddata = []\\r\",\"\\r\",\"        for tech in trackList:\\r\",\"            try:\\r\",\"               # print(\'Fetching employees in next shift for \', tech[0], cons_shift[0][\'next_shift\'])\\r\",\"                if len(cons_shift) &lt;= 0:\\r\",\"                    print(\'No employees in next shift for tech \', tech[0])\\r\",\"                else:\\r\",\"                        \\r\",\"                    empInNextShift = empListdf.filter((empListdf[\'Track\'] == tech[0]) &amp;(empListdf[\'shift\'] == cons_shift[0][\'next_shift\']))\\r\",\"                    if empInNextShift.count()&lt;=0:\\r\",\"                        print(\'No employees in next shift for tech \', tech[0])\\r\",\"                    else:\\r\",\"                        empListInNextShift = empInNextShift.select(explode(\'EmpInTech\').alias(\'EmpInTech\')).collect()\\r\",\"        \\r\",\"                        empWithNoOfTickets = []\\r\",\"                        for priority in priorityList:\\r\",\"                            for emp in empListInNextShift:\\r\",\"        \\r\",\"                                empInList = any(emp[0] in sublist[1] for sublist in empWithNoOfTickets)\\r\",\"                                if(not empInList):\\r\",\"                                    intitalWeight =0\\r\",\"                                    empWithNoOfTickets.append([intitalWeight, emp[0]])\\r\",\"                            Assigneddata = assignTicket(empWithNoOfTickets, priority, tech, ticketAssignedToNextShift,ticketWeight)\\r\",\"            except:\\r\",\"                a=1\\r\",\"\\r\",\"\\r\",\"        if(len(Assigneddata)>0):\\r\",\"            headers = [\'Number\', \'Category\', \'Priority\', \'State\', \'Subject\', \'cleanText\', \'Assignee\']\\r\",\"            updated = spark.createDataFrame(Assigneddata, headers)\\r\",\"            updated = updated.withColumn(\'Shift\',lit(None).cast(StringType()))\\r\",\"            print(\'Assignment completed\')\\r\",\"            updated.show()\\r\",\"            \\r\",\"            return updated\\r\",\"        else:\\r\",\"            return df1\\r\",\"\\r\"]},{\"dataset\":{\"alias\":\"Roster data\",\"name\":\"VGK07GPIRW\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 07:03:18\",\"alias\":\"leo1311\",\"id\":15,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"@datasourcepass\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"@datasourceuser\\\",\\\"url\\\":\\\"@datasourceurl/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT NAME,track,shift,STR_TO_DATE(DATE, \'%m/%d/%Y\') AS DATE,userAvailable,shiftStart,shiftEnd,reassignAt,reassignedShift FROM @projectname_useravailability roster\\n JOIN @projectname_rosterdefinition def ON def.shiftName=roster.shift WHERE STR_TO_DATE(DATE, \'%m/%d/%Y\')=CURRENT_DATE AND userAvailable=1\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"groups\":[]},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},{\"dataset\":{\"alias\":\"Newdump categories\",\"name\":\"SACUEMTW8R\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 07:03:18\",\"alias\":\"leo1311\",\"id\":15,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"@datasourcepass\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"@datasourceuser\\\",\\\"url\\\":\\\"@datasourceurl/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from @projectname_techclassifiedtickets\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"@projectname_techclassifiedtickets\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"groups\":[]},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},{\"dataset\":{\"alias\":\"Ticket Weightage\",\"name\":\"3XV2PZ4WB3\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 07:03:18\",\"alias\":\"leo1311\",\"id\":15,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"@datasourcepass\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"@datasourceuser\\\",\\\"url\\\":\\\"@datasourceurl/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from @projectname_priorityweightage\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"@projectname_priorityweightage\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"groups\":[]},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"BRFGq\",\"alias\":\"Roster Data\",\"name\":\"Dataset  Extractor\",\"classname\":\"DatasetExtractorConfig\",\"category\":\"ExtractorConfig\",\"attributes\":{\"dataset\":{\"alias\":\"Roster data\",\"name\":\"VGK07GPIRW\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 07:03:18\",\"alias\":\"leo1311\",\"id\":15,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"@datasourcepass\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"@datasourceuser\\\",\\\"url\\\":\\\"@datasourceurl/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT NAME,track,shift,STR_TO_DATE(DATE, \'%m/%d/%Y\') AS DATE,userAvailable,shiftStart,shiftEnd,reassignAt,reassignedShift FROM @projectname_useravailability roster\\n JOIN @projectname_rosterdefinition def ON def.shiftName=roster.shift WHERE STR_TO_DATE(DATE, \'%m/%d/%Y\')=CURRENT_DATE AND userAvailable=1\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"groups\":[]},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},\"position_x\":\"90\",\"position_y\":\"30\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"KBFha\",\"elementPosition\":\"TopCenter\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"isValidation\":\"checkbox\",\"samplingRatio\":\"text\",\"applySchema\":\"checkbox\"},\"context\":[]},{\"id\":\"ugjxL\",\"alias\":\"Assigned Tickets\",\"name\":\"Dataset  Loader\",\"classname\":\"DatasetLoaderConfig\",\"category\":\"LoaderConfig\",\"attributes\":{\"dataset\":{\"alias\":\"Assigned Tickets\",\"name\":\"JMHSQV3ANQ\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 07:03:18\",\"alias\":\"leo1311\",\"id\":15,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"@datasourcepass\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"@datasourceuser\\\",\\\"url\\\":\\\"@datasourceurl/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select number, predicted_assignee from @projectname_tickets_enriched where  predicted_assignee is not null order by last_updated desc\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"update\",\"params\":\"{}\",\"tableName\":\"@projectname_tickets_enriched\",\"uniqueIdentifier\":\"\",\"csv_separator\":\",\",\"bucketName\":\"leo1311\",\"fileName\":\"output (1).csv\",\"file\":\"\",\"extraParams\":\"\",\"fileId\":\"filedatasetYY2021MM10DD22EE9742465a69854e348083cd67afda5c7f\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"groups\":[]},\"applySchema\":false},\"position_x\":\"880\",\"position_y\":\"150\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"vXYyO\",\"elementPosition\":\"RightMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"applySchema\":\"checkbox\"},\"context\":[{\"script\":[\"import logging\\r\",\"import datetime\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        dataset = dataset.select(col(\'Number\').alias(\'number\'),col(\'Assignee\').alias(\'predicted_assignee\'))\\r\",\"        dataset = dataset.withColumn(\'last_updated\',lit(datetime.datetime.now()))\\r\",\"        return dataset\\r\"]},{\"params\":\"{\\\"IncidentId\\\":\\\"\\\"}\",\"script\":[\"import logging as logger\\r\",\"from datetime import datetime\\r\",\"from pyspark.sql import SparkSession\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"import datetime\\r\",\"import time\\r\",\"import pandas as pd\\r\",\"\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, df1, df2, df3):\\r\",\"        incidentId = self.params[\'IncidentId\']\\r\",\"        if incidentId !=\'\':\\r\",\"            df1 = df1.filter(df1[\'Number\'] == incidentId)\\r\",\"        \\r\",\"        spark = SparkSession.builder.master(\'local[*]\').appName(\'ShiftRosterAssignment\').getOrCreate()\\r\",\"\\r\",\"        def assignTicket(empWithNoOfTickets, priority, tech, ticketAssignedToNextShift,ticketWeight):\\r\",\"            \\r\",\"            print(\'Assigning tickets for\', tech[0],priority[0],\'Open\')\\r\",\"            try:\\r\",\"           \\r\",\"                ticketdf = df1.filter(\\r\",\"                    (df1[\'Category\'] == tech[0]) &amp; (df1[\'Priority\'] == priority[0]) &amp; (df1[\'State\'] == \'New\'))\\r\",\"                #ticketdf = ticketdf.where(col(\'Assignee\').isNull())\\r\",\"                \\r\",\"                #Change Assignee to Null instead of ,,\\r\",\"                currPointer=0\\r\",\"                ticketAssigned = {}\\r\",\"               \\r\",\"                if(ticketdf.count()>0):\\r\",\"                    print(\'Assigning tickets to employees for \', priority[0], \' priority and \', tech[0], \'tech\')\\r\",\"                else:\\r\",\"                    print(\'No tickets to assign for \', priority[0], \' priority and \', tech[0], \'tech\')\\r\",\"                for i in ticketdf.collect():\\r\",\"                    \\r\",\"                    empWithNoOfTickets.sort(key=lambda empWithNoOfTickets: empWithNoOfTickets[0])\\r\",\"                    \\r\",\"                    #use min instead of sort\\r\",\"                    # i[3] = \'Open\'\\r\",\"                    \\r\",\"                    \\r\",\"                    \\r\",\"                    if empWithNoOfTickets[currPointer][1] in ticketAssigned.keys():\\r\",\"                        print([i[0],i[1],i[2],i[3],i[4],i[5],empWithNoOfTickets[currPointer][1]])\\r\",\"                        ticketAssigned[empWithNoOfTickets[currPointer][1]].append([i[0],i[1],i[2],i[3],i[4],i[5],empWithNoOfTickets[currPointer][1]])\\r\",\"                    else:\\r\",\"                        \\r\",\"                        \\r\",\"                        print([[i[0],i[1],i[2],i[3],i[4],i[5],empWithNoOfTickets[currPointer][1]]])\\r\",\"                        ticketAssigned[empWithNoOfTickets[currPointer][1]] = [[i[0],i[1],i[2],i[3],i[4],i[5],empWithNoOfTickets[currPointer][1]]]\\r\",\"                        print(ticketAssigned)\\r\",\"                    \\r\",\"                    ticketAssignedToNextShift.append([i[0], i[1], i[2], i[3], i[4], i[5], empWithNoOfTickets[currPointer][1]])\\r\",\"                    print(ticketWeight[priority[0]])\\r\",\"                    empWithNoOfTickets[currPointer][0]+=(ticketWeight[priority[0]]/len(empListInNextShift))\\r\",\"                    #print(empWithNoOfTickets,i[2])\\r\",\"                    \\r\",\"                return ticketAssignedToNextShift\\r\",\"            except ex:\\r\",\"                return \'\'\\r\",\"\\r\",\"\\r\",\"        trackList = df2.select(\'track\').distinct().collect()\\r\",\"        priorityList = df1.select(\'Priority\').distinct().collect()\\r\",\"        priorityList.sort()\\r\",\"\\r\",\"        empListdf = df2.groupBy(\'track\', \'shift\').agg(array_distinct(collect_list(\'Name\')).alias(\'EmpInTech\'),\\r\",\"                                                      first(\'shiftStart\').alias(\'shiftStart\'),\\r\",\"                                                      first(\'shiftEnd\').alias(\'shiftEnd\'),\\r\",\"                                                      first(\'reassignAt\').alias(\'reassignAt\'),\\r\",\"                                                      first(\'reassignedShift\').alias(\'reassignedShift\'))\\r\",\"        empListdf = empListdf.withColumn(\'EmpInTechSize\', size(\'EmpInTech\'))\\r\",\"\\r\",\"        current_time = datetime.datetime.now().time().strftime(\'%H:%M:%S\')\\r\",\"        # Logic for adding shift in db?\\r\",\"        shiftsdf = df2.select(\'shift\', \'shiftStart\', \'shiftEnd\', \'reassignedShift\').distinct()\\r\",\"\\r\",\"        cons_shift = shiftsdf.filter((shiftsdf[\'shiftStart\'] &lt;= current_time) &amp;(shiftsdf[\'shiftEnd\'] > current_time)).select(col(\'shift\').alias(\'current_shift\'), col(\'reassignedShift\').alias(\'next_shift\')).collect()\\r\",\"\\r\",\"        ticketAssignedToNextShift=[]\\r\",\"        ticketWeight = {}\\r\",\"        #for converting weight df to dict\\r\",\"        for priority in priorityList:\\r\",\"            try:\\r\",\"                weightageList = df3.filter((df3[\'Priority\'] == priority[0])).select(\'Weight\').collect()\\r\",\"                ticketWeight[priority[0]] = int(weightageList[0][0])\\r\",\"                print(\'Abc\')\\r\",\"                print(weightageList)\\r\",\"                print(priority)\\r\",\"            except:\\r\",\"                a=1\\r\",\"\\r\",\"        Assigneddata = []\\r\",\"\\r\",\"        for tech in trackList:\\r\",\"            try:\\r\",\"               # print(\'Fetching employees in next shift for \', tech[0], cons_shift[0][\'next_shift\'])\\r\",\"                if len(cons_shift) &lt;= 0:\\r\",\"                    print(\'No employees in next shift for tech \', tech[0])\\r\",\"                else:\\r\",\"                        \\r\",\"                    empInNextShift = empListdf.filter((empListdf[\'Track\'] == tech[0]) &amp;(empListdf[\'shift\'] == cons_shift[0][\'next_shift\']))\\r\",\"                    if empInNextShift.count()&lt;=0:\\r\",\"                        print(\'No employees in next shift for tech \', tech[0])\\r\",\"                    else:\\r\",\"                        empListInNextShift = empInNextShift.select(explode(\'EmpInTech\').alias(\'EmpInTech\')).collect()\\r\",\"        \\r\",\"                        empWithNoOfTickets = []\\r\",\"                        for priority in priorityList:\\r\",\"                            for emp in empListInNextShift:\\r\",\"        \\r\",\"                                empInList = any(emp[0] in sublist[1] for sublist in empWithNoOfTickets)\\r\",\"                                if(not empInList):\\r\",\"                                    intitalWeight =0\\r\",\"                                    empWithNoOfTickets.append([intitalWeight, emp[0]])\\r\",\"                            Assigneddata = assignTicket(empWithNoOfTickets, priority, tech, ticketAssignedToNextShift,ticketWeight)\\r\",\"            except:\\r\",\"                a=1\\r\",\"\\r\",\"\\r\",\"        if(len(Assigneddata)>0):\\r\",\"            headers = [\'Number\', \'Category\', \'Priority\', \'State\', \'Subject\', \'cleanText\', \'Assignee\']\\r\",\"            updated = spark.createDataFrame(Assigneddata, headers)\\r\",\"            updated = updated.withColumn(\'Shift\',lit(None).cast(StringType()))\\r\",\"            print(\'Assignment completed\')\\r\",\"            updated.show()\\r\",\"            \\r\",\"            return updated\\r\",\"        else:\\r\",\"            return df1\\r\",\"\\r\"]},{\"dataset\":{\"alias\":\"Roster data\",\"name\":\"VGK07GPIRW\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 07:03:18\",\"alias\":\"leo1311\",\"id\":15,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"@datasourcepass\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"@datasourceuser\\\",\\\"url\\\":\\\"@datasourceurl/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT NAME,track,shift,STR_TO_DATE(DATE, \'%m/%d/%Y\') AS DATE,userAvailable,shiftStart,shiftEnd,reassignAt,reassignedShift FROM @projectname_useravailability roster\\n JOIN @projectname_rosterdefinition def ON def.shiftName=roster.shift WHERE STR_TO_DATE(DATE, \'%m/%d/%Y\')=CURRENT_DATE AND userAvailable=1\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"groups\":[]},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},{\"dataset\":{\"alias\":\"Newdump categories\",\"name\":\"SACUEMTW8R\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 07:03:18\",\"alias\":\"leo1311\",\"id\":15,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"@datasourcepass\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"@datasourceuser\\\",\\\"url\\\":\\\"@datasourceurl/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from @projectname_techclassifiedtickets\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"@projectname_techclassifiedtickets\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"groups\":[]},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},{\"dataset\":{\"alias\":\"Ticket Weightage\",\"name\":\"3XV2PZ4WB3\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 07:03:18\",\"alias\":\"leo1311\",\"id\":15,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"@datasourcepass\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"@datasourceuser\\\",\\\"url\\\":\\\"@datasourceurl/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from @projectname_priorityweightage\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"@projectname_priorityweightage\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"groups\":[]},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"yPwNy\",\"alias\":\"Classified Tickets\",\"name\":\"Dataset  Extractor\",\"classname\":\"DatasetExtractorConfig\",\"category\":\"ExtractorConfig\",\"attributes\":{\"dataset\":{\"alias\":\"Newdump categories\",\"name\":\"SACUEMTW8R\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 07:03:18\",\"alias\":\"leo1311\",\"id\":15,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"@datasourcepass\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"@datasourceuser\\\",\\\"url\\\":\\\"@datasourceurl/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from @projectname_techclassifiedtickets\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"@projectname_techclassifiedtickets\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"groups\":[]},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},\"position_x\":\"90\",\"position_y\":\"150\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"KBFha\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"isValidation\":\"checkbox\",\"samplingRatio\":\"text\",\"applySchema\":\"checkbox\"},\"context\":[]},{\"id\":\"NsExs\",\"alias\":\"Ticket Weightage\",\"name\":\"Dataset  Extractor\",\"classname\":\"DatasetExtractorConfig\",\"category\":\"ExtractorConfig\",\"attributes\":{\"dataset\":{\"alias\":\"Ticket Weightage\",\"name\":\"3XV2PZ4WB3\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 07:03:18\",\"alias\":\"leo1311\",\"id\":15,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"@datasourcepass\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"@datasourceuser\\\",\\\"url\\\":\\\"@datasourceurl/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from @projectname_priorityweightage\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"@projectname_priorityweightage\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"groups\":[]},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},\"position_x\":\"90\",\"position_y\":\"270\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"KBFha\",\"elementPosition\":\"BottomCenter\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"isValidation\":\"checkbox\",\"samplingRatio\":\"text\",\"applySchema\":\"checkbox\"},\"context\":[]}]}' WHERE NAME='LEONXTSH71215' AND ORGANIZATION='leo1311';
            UPDATE mlpipeline SET json_content='{\"elements\":[{\"id\":\"DIbry\",\"alias\":\"Pre  Processing  Script\",\"name\":\"Pre  Processing  Script\",\"classname\":\"PreProcessingScriptConfig\",\"category\":\"BaseConfig\",\"attributes\":{\"params\":\"{\\\"IncidentId\\\":\\\"\\\"}\",\"script\":[\"import logging as logger\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"import re\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset1, dataset2):\\r\",\"        incidentId = self.params[\'IncidentId\']\\r\",\"        if incidentId !=\'\':\\r\",\"            dataset1 = dataset1.filter(dataset1[\'Number\'] == incidentId)\\r\",\"            logger.info(\'Running for Incident:\'+incidentId)\\r\",\"        #df = dataset1.filter(col(\'subject\').contains(\'linux\')).show()\\r\",\"        def alphaNum(text):\\r\",\"            alphanumeric = \'\'\\r\",\"            for character in text:\\r\",\"                if character.isalnum():\\r\",\"                    alphanumeric += character\\r\",\"                else:\\r\",\"                    alphanumeric += \' \'\\r\",\"            alphanumeric = re.sub(\' +\', \' \', alphanumeric)\\r\",\"            finalTokens = [t for t in alphanumeric.split(\' \') if not t.isnumeric()]\\r\",\"            return \' \'.join(finalTokens)\\r\",\"        udfAlpaNum = udf(alphaNum, StringType())\\r\",\"        dataset1 = dataset1.withColumn(\'cleanText\',trim(udfAlpaNum(\'Subject\')))\\r\",\"        dataset1.show()\\r\",\"        dataset2 = dataset2.withColumn(\'regex_exp\',concat(lit(\'^(.*?(?i:\'),lower(trim(udfAlpaNum(\'Keyword\'))),lit(\')[^$]*)$\')))\\r\",\"        print(dataset2)\\r\",\"        dataset2.show()\\r\",\"        df = dataset1.withColumn(\'Category1\', when(lower(col(\'cleanText\')).contains(\'linux\'), \'Linux\')\\r\",\"                                .when(lower(col(\'cleanText\')).contains(\'esb\'), \'ESB\')\\r\",\"                                .when(lower(col(\'cleanText\')).contains(\'etl\'), \'ETL\')\\r\",\"                                .when(lower(col(\'cleanText\')).contains(\'mft\'), \'MFT\')\\r\",\"                                .when(lower(col(\'cleanText\')).contains(\'windows\'), \'DBA\')\\r\",\"                                .when(col(\'cleanText\').contains(\' PO \') | col(\'cleanText\').contains(\'PO \') | col(\'cleanText\').contains(\' PO\'), \'ESB\')\\r\",\"                                .when(col(\'cleanText\').contains(\' GR \') | col(\'cleanText\').contains(\'GR \') | col(\'cleanText\').contains(\' GR\'), \'ESB\')\\r\",\"                                .when(col(\'cleanText\').contains(\' CD \') | col(\'cleanText\').contains(\'CD \') | col(\'cleanText\').contains(\' CD\'), \'MFT\'))\\r\",\"        \\r\",\"        df.show()                        \\r\",\"        #print(\'DF after tech mapping------------------------------------------------\')                        \\r\",\"        newdf = df.where(col(\'Category1\').isNull()).select(\'Number\',col(\'Subject\').alias(\'shortdescription\'))\\r\",\"        #print(\'NEWDF after tech mapping------------------------------------------------\')\\r\",\"        #print(newdf.count())\\r\",\"        #newdf.show()\\r\",\"        \\r\",\"        label_list = dataset2.rdd.map(lambda x:{\'category\':x.Category,\'regex\':x.regex_exp}).collect()\\r\",\"        \\r\",\"        def getsop(label,text):\\r\",\"            for item in label:\\r\",\"                #print(\'text is:\',text.lower())\\r\",\"                #print(\'keyword is\',item[\'regex\'])\\r\",\"                ismatch = re.match(item[\'regex\'],text.lower())\\r\",\"                if ismatch != None:\\r\",\"                    #print(\'inside if:category is: \', item[\'category\'])\\r\",\"                    return item[\'category\']\\r\",\"            return\\r\",\"        \\r\",\"        def udf_sop(label_list):\\r\",\"            return udf(lambda l: getsop(label_list, l))\\r\",\"            \\r\",\"        newdf = newdf.withColumn(\'Category2\', udf_sop(label_list)(col(\'shortdescription\')))\\r\",\"        #newdf = df.where(col(\'Category\').isNull()).withColumn(\'Category\', udf_sop(label_list)(col(\'cleanText\')))\\r\",\"        #print(\'NEWDF after tech mapping with regex------------------------------------------------\')\\r\",\"        newdf.show()\\r\",\"        \\r\",\"        #finaldf = newdf.where(col(\'Category\').isNull())\\r\",\"        #print(finaldf.count())\\r\",\"        \\r\",\"        finaldf = df.join(newdf, (\'Number\'), how=\'left\')\\r\",\"        finaldf = finaldf.withColumn(\'Category\', when(col(\'Category1\').isNotNull(), col(\'Category1\'))\\r\",\"                                    .otherwise(col(\'Category2\')))\\r\",\"        #finaldf1 = finaldf.where(col(\'Category\').isNotNull())\\r\",\"        #finaldf2 = finaldf.where(col(\'Category\').isNull())\\r\",\"        #print(finaldf1.count())\\r\",\"        #print(finaldf2.count())\\r\",\"        finaldf = finaldf.select(\'Number\',\'Category\',\'Priority\',\'State\',\'Subject\',\'cleanText\')\\r\",\"        finaldf.show()\\r\",\"        return finaldf\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"]},\"position_x\":\"330\",\"position_y\":\"140\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"Soxxz\",\"elementPosition\":\"LeftMiddle\"},{\"type\":\"target\",\"endpoint\":\"dataset1\",\"position\":\"LeftMiddle\",\"elementId\":\"aKsMJ\",\"elementPosition\":\"RightMiddle\"},{\"type\":\"target\",\"endpoint\":\"dataset2\",\"position\":\"TopCenter\",\"elementId\":\"usBsx\",\"elementPosition\":\"RightMiddle\"}],\"inputEndpoints\":[\"dataset1\",\"dataset2\",\"dataset3\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"params\":\"textarea\",\"script\":\"textarea\"},\"context\":[{\"dataset\":{\"alias\":\"Ticket Dump\",\"name\":\"UCW5VREB0F\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 07:03:18\",\"alias\":\"leo1311\",\"id\":15,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"@datasourcepass\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"@datasourceuser\\\",\\\"url\\\":\\\"@datasourceurl/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT NUMBER, Priority, shortdescription AS Subject, State FROM @projectname_tickets\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"@projectname_tickets\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"groups\":[]},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},{\"dataset\":{\"alias\":\"Keywords\",\"name\":\"ODHDPEJUDC\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 07:03:18\",\"alias\":\"leo1311\",\"id\":15,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"@datasourcepass\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"@datasourceuser\\\",\\\"url\\\":\\\"@datasourceurl/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from @projectname_techkeywordmapping\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"@projectname_techkeywordmapping\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"groups\":[]},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"Soxxz\",\"alias\":\"Python  Script  Transformer\",\"name\":\"Python  Script  Transformer\",\"classname\":\"PythonScriptTransformerConfig\",\"category\":\"TransformerConfig\",\"attributes\":{\"script\":[\"import logging\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        print(\'dataset loading to DB------------------------------------------------\')\\r\",\"        dataset.show()    \\r\",\"        return dataset\\r\"]},\"position_x\":\"550\",\"position_y\":\"140\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"DIbry\",\"elementPosition\":\"RightMiddle\"},{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"TShvs\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"script\":\"textarea\"},\"context\":[{\"params\":\"{\\\"IncidentId\\\":\\\"\\\"}\",\"script\":[\"import logging as logger\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"import re\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset1, dataset2):\\r\",\"        incidentId = self.params[\'IncidentId\']\\r\",\"        if incidentId !=\'\':\\r\",\"            dataset1 = dataset1.filter(dataset1[\'Number\'] == incidentId)\\r\",\"            logger.info(\'Running for Incident:\'+incidentId)\\r\",\"        #df = dataset1.filter(col(\'subject\').contains(\'linux\')).show()\\r\",\"        def alphaNum(text):\\r\",\"            alphanumeric = \'\'\\r\",\"            for character in text:\\r\",\"                if character.isalnum():\\r\",\"                    alphanumeric += character\\r\",\"                else:\\r\",\"                    alphanumeric += \' \'\\r\",\"            alphanumeric = re.sub(\' +\', \' \', alphanumeric)\\r\",\"            finalTokens = [t for t in alphanumeric.split(\' \') if not t.isnumeric()]\\r\",\"            return \' \'.join(finalTokens)\\r\",\"        udfAlpaNum = udf(alphaNum, StringType())\\r\",\"        dataset1 = dataset1.withColumn(\'cleanText\',trim(udfAlpaNum(\'Subject\')))\\r\",\"        dataset1.show()\\r\",\"        dataset2 = dataset2.withColumn(\'regex_exp\',concat(lit(\'^(.*?(?i:\'),lower(trim(udfAlpaNum(\'Keyword\'))),lit(\')[^$]*)$\')))\\r\",\"        print(dataset2)\\r\",\"        dataset2.show()\\r\",\"        df = dataset1.withColumn(\'Category1\', when(lower(col(\'cleanText\')).contains(\'linux\'), \'Linux\')\\r\",\"                                .when(lower(col(\'cleanText\')).contains(\'esb\'), \'ESB\')\\r\",\"                                .when(lower(col(\'cleanText\')).contains(\'etl\'), \'ETL\')\\r\",\"                                .when(lower(col(\'cleanText\')).contains(\'mft\'), \'MFT\')\\r\",\"                                .when(lower(col(\'cleanText\')).contains(\'windows\'), \'DBA\')\\r\",\"                                .when(col(\'cleanText\').contains(\' PO \') | col(\'cleanText\').contains(\'PO \') | col(\'cleanText\').contains(\' PO\'), \'ESB\')\\r\",\"                                .when(col(\'cleanText\').contains(\' GR \') | col(\'cleanText\').contains(\'GR \') | col(\'cleanText\').contains(\' GR\'), \'ESB\')\\r\",\"                                .when(col(\'cleanText\').contains(\' CD \') | col(\'cleanText\').contains(\'CD \') | col(\'cleanText\').contains(\' CD\'), \'MFT\'))\\r\",\"        \\r\",\"        df.show()                        \\r\",\"        #print(\'DF after tech mapping------------------------------------------------\')                        \\r\",\"        newdf = df.where(col(\'Category1\').isNull()).select(\'Number\',col(\'Subject\').alias(\'shortdescription\'))\\r\",\"        #print(\'NEWDF after tech mapping------------------------------------------------\')\\r\",\"        #print(newdf.count())\\r\",\"        #newdf.show()\\r\",\"        \\r\",\"        label_list = dataset2.rdd.map(lambda x:{\'category\':x.Category,\'regex\':x.regex_exp}).collect()\\r\",\"        \\r\",\"        def getsop(label,text):\\r\",\"            for item in label:\\r\",\"                #print(\'text is:\',text.lower())\\r\",\"                #print(\'keyword is\',item[\'regex\'])\\r\",\"                ismatch = re.match(item[\'regex\'],text.lower())\\r\",\"                if ismatch != None:\\r\",\"                    #print(\'inside if:category is: \', item[\'category\'])\\r\",\"                    return item[\'category\']\\r\",\"            return\\r\",\"        \\r\",\"        def udf_sop(label_list):\\r\",\"            return udf(lambda l: getsop(label_list, l))\\r\",\"            \\r\",\"        newdf = newdf.withColumn(\'Category2\', udf_sop(label_list)(col(\'shortdescription\')))\\r\",\"        #newdf = df.where(col(\'Category\').isNull()).withColumn(\'Category\', udf_sop(label_list)(col(\'cleanText\')))\\r\",\"        #print(\'NEWDF after tech mapping with regex------------------------------------------------\')\\r\",\"        newdf.show()\\r\",\"        \\r\",\"        #finaldf = newdf.where(col(\'Category\').isNull())\\r\",\"        #print(finaldf.count())\\r\",\"        \\r\",\"        finaldf = df.join(newdf, (\'Number\'), how=\'left\')\\r\",\"        finaldf = finaldf.withColumn(\'Category\', when(col(\'Category1\').isNotNull(), col(\'Category1\'))\\r\",\"                                    .otherwise(col(\'Category2\')))\\r\",\"        #finaldf1 = finaldf.where(col(\'Category\').isNotNull())\\r\",\"        #finaldf2 = finaldf.where(col(\'Category\').isNull())\\r\",\"        #print(finaldf1.count())\\r\",\"        #print(finaldf2.count())\\r\",\"        finaldf = finaldf.select(\'Number\',\'Category\',\'Priority\',\'State\',\'Subject\',\'cleanText\')\\r\",\"        finaldf.show()\\r\",\"        return finaldf\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"]},{\"dataset\":{\"alias\":\"Ticket Dump\",\"name\":\"UCW5VREB0F\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 07:03:18\",\"alias\":\"leo1311\",\"id\":15,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"@datasourcepass\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"@datasourceuser\\\",\\\"url\\\":\\\"@datasourceurl/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT NUMBER, Priority, shortdescription AS Subject, State FROM @projectname_tickets\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"@projectname_tickets\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"groups\":[]},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},{\"dataset\":{\"alias\":\"Keywords\",\"name\":\"ODHDPEJUDC\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 07:03:18\",\"alias\":\"leo1311\",\"id\":15,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"@datasourcepass\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"@datasourceuser\\\",\\\"url\\\":\\\"@datasourceurl/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from @projectname_techkeywordmapping\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"@projectname_techkeywordmapping\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"groups\":[]},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"aKsMJ\",\"alias\":\"Dataset  Extractor\",\"name\":\"Dataset  Extractor\",\"classname\":\"DatasetExtractorConfig\",\"category\":\"ExtractorConfig\",\"attributes\":{\"dataset\":{\"alias\":\"Ticket Dump\",\"name\":\"UCW5VREB0F\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 07:03:18\",\"alias\":\"leo1311\",\"id\":15,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"@datasourcepass\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"@datasourceuser\\\",\\\"url\\\":\\\"@datasourceurl/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT NUMBER, Priority, shortdescription AS Subject, State FROM @projectname_tickets\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"@projectname_tickets\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"groups\":[]},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},\"position_x\":\"90\",\"position_y\":\"140\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"DIbry\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"isValidation\":\"checkbox\",\"samplingRatio\":\"text\",\"applySchema\":\"checkbox\"},\"context\":[]},{\"id\":\"TShvs\",\"alias\":\"Classified Tickets Tech\",\"name\":\"Dataset  Loader\",\"classname\":\"DatasetLoaderConfig\",\"category\":\"LoaderConfig\",\"attributes\":{\"dataset\":{\"alias\":\"Classified tickets\",\"name\":\"AQXO5AIBSR\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 07:03:18\",\"alias\":\"leo1311\",\"id\":15,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"@datasourcepass\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"@datasourceuser\\\",\\\"url\\\":\\\"@datasourceurl/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT * FROM @projectname_techclassifiedtickets\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"overwrite\",\"params\":\"{}\",\"tableName\":\"@projectname_techclassifiedtickets\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"groups\":[]},\"applySchema\":false},\"position_x\":\"800\",\"position_y\":\"140\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"Soxxz\",\"elementPosition\":\"RightMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"applySchema\":\"checkbox\"},\"context\":[{\"script\":[\"import logging\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        print(\'dataset loading to DB------------------------------------------------\')\\r\",\"        dataset.show()    \\r\",\"        return dataset\\r\"]},{\"params\":\"{\\\"IncidentId\\\":\\\"\\\"}\",\"script\":[\"import logging as logger\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"import re\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset1, dataset2):\\r\",\"        incidentId = self.params[\'IncidentId\']\\r\",\"        if incidentId !=\'\':\\r\",\"            dataset1 = dataset1.filter(dataset1[\'Number\'] == incidentId)\\r\",\"            logger.info(\'Running for Incident:\'+incidentId)\\r\",\"        #df = dataset1.filter(col(\'subject\').contains(\'linux\')).show()\\r\",\"        def alphaNum(text):\\r\",\"            alphanumeric = \'\'\\r\",\"            for character in text:\\r\",\"                if character.isalnum():\\r\",\"                    alphanumeric += character\\r\",\"                else:\\r\",\"                    alphanumeric += \' \'\\r\",\"            alphanumeric = re.sub(\' +\', \' \', alphanumeric)\\r\",\"            finalTokens = [t for t in alphanumeric.split(\' \') if not t.isnumeric()]\\r\",\"            return \' \'.join(finalTokens)\\r\",\"        udfAlpaNum = udf(alphaNum, StringType())\\r\",\"        dataset1 = dataset1.withColumn(\'cleanText\',trim(udfAlpaNum(\'Subject\')))\\r\",\"        dataset1.show()\\r\",\"        dataset2 = dataset2.withColumn(\'regex_exp\',concat(lit(\'^(.*?(?i:\'),lower(trim(udfAlpaNum(\'Keyword\'))),lit(\')[^$]*)$\')))\\r\",\"        print(dataset2)\\r\",\"        dataset2.show()\\r\",\"        df = dataset1.withColumn(\'Category1\', when(lower(col(\'cleanText\')).contains(\'linux\'), \'Linux\')\\r\",\"                                .when(lower(col(\'cleanText\')).contains(\'esb\'), \'ESB\')\\r\",\"                                .when(lower(col(\'cleanText\')).contains(\'etl\'), \'ETL\')\\r\",\"                                .when(lower(col(\'cleanText\')).contains(\'mft\'), \'MFT\')\\r\",\"                                .when(lower(col(\'cleanText\')).contains(\'windows\'), \'DBA\')\\r\",\"                                .when(col(\'cleanText\').contains(\' PO \') | col(\'cleanText\').contains(\'PO \') | col(\'cleanText\').contains(\' PO\'), \'ESB\')\\r\",\"                                .when(col(\'cleanText\').contains(\' GR \') | col(\'cleanText\').contains(\'GR \') | col(\'cleanText\').contains(\' GR\'), \'ESB\')\\r\",\"                                .when(col(\'cleanText\').contains(\' CD \') | col(\'cleanText\').contains(\'CD \') | col(\'cleanText\').contains(\' CD\'), \'MFT\'))\\r\",\"        \\r\",\"        df.show()                        \\r\",\"        #print(\'DF after tech mapping------------------------------------------------\')                        \\r\",\"        newdf = df.where(col(\'Category1\').isNull()).select(\'Number\',col(\'Subject\').alias(\'shortdescription\'))\\r\",\"        #print(\'NEWDF after tech mapping------------------------------------------------\')\\r\",\"        #print(newdf.count())\\r\",\"        #newdf.show()\\r\",\"        \\r\",\"        label_list = dataset2.rdd.map(lambda x:{\'category\':x.Category,\'regex\':x.regex_exp}).collect()\\r\",\"        \\r\",\"        def getsop(label,text):\\r\",\"            for item in label:\\r\",\"                #print(\'text is:\',text.lower())\\r\",\"                #print(\'keyword is\',item[\'regex\'])\\r\",\"                ismatch = re.match(item[\'regex\'],text.lower())\\r\",\"                if ismatch != None:\\r\",\"                    #print(\'inside if:category is: \', item[\'category\'])\\r\",\"                    return item[\'category\']\\r\",\"            return\\r\",\"        \\r\",\"        def udf_sop(label_list):\\r\",\"            return udf(lambda l: getsop(label_list, l))\\r\",\"            \\r\",\"        newdf = newdf.withColumn(\'Category2\', udf_sop(label_list)(col(\'shortdescription\')))\\r\",\"        #newdf = df.where(col(\'Category\').isNull()).withColumn(\'Category\', udf_sop(label_list)(col(\'cleanText\')))\\r\",\"        #print(\'NEWDF after tech mapping with regex------------------------------------------------\')\\r\",\"        newdf.show()\\r\",\"        \\r\",\"        #finaldf = newdf.where(col(\'Category\').isNull())\\r\",\"        #print(finaldf.count())\\r\",\"        \\r\",\"        finaldf = df.join(newdf, (\'Number\'), how=\'left\')\\r\",\"        finaldf = finaldf.withColumn(\'Category\', when(col(\'Category1\').isNotNull(), col(\'Category1\'))\\r\",\"                                    .otherwise(col(\'Category2\')))\\r\",\"        #finaldf1 = finaldf.where(col(\'Category\').isNotNull())\\r\",\"        #finaldf2 = finaldf.where(col(\'Category\').isNull())\\r\",\"        #print(finaldf1.count())\\r\",\"        #print(finaldf2.count())\\r\",\"        finaldf = finaldf.select(\'Number\',\'Category\',\'Priority\',\'State\',\'Subject\',\'cleanText\')\\r\",\"        finaldf.show()\\r\",\"        return finaldf\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\",\"\\r\"]},{\"dataset\":{\"alias\":\"Ticket Dump\",\"name\":\"UCW5VREB0F\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 07:03:18\",\"alias\":\"leo1311\",\"id\":15,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"@datasourcepass\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"@datasourceuser\\\",\\\"url\\\":\\\"@datasourceurl/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT NUMBER, Priority, shortdescription AS Subject, State FROM @projectname_tickets\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"@projectname_tickets\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"groups\":[]},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},{\"dataset\":{\"alias\":\"Keywords\",\"name\":\"ODHDPEJUDC\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 07:03:18\",\"alias\":\"leo1311\",\"id\":15,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"@datasourcepass\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"@datasourceuser\\\",\\\"url\\\":\\\"@datasourceurl/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from @projectname_techkeywordmapping\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"@projectname_techkeywordmapping\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"groups\":[]},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"usBsx\",\"alias\":\"Keyword\",\"name\":\"Dataset  Extractor\",\"classname\":\"DatasetExtractorConfig\",\"category\":\"ExtractorConfig\",\"attributes\":{\"dataset\":{\"alias\":\"Keywords\",\"name\":\"ODHDPEJUDC\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 07:03:18\",\"alias\":\"leo1311\",\"id\":15,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"@datasourcepass\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"@datasourceuser\\\",\\\"url\\\":\\\"@datasourceurl/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\"},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from @projectname_techkeywordmapping\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"@projectname_techkeywordmapping\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"isAuditRequired\":\"\",\"isPermissionManaged\":\"\",\"isApprovalRequired\":\"\",\"isInboxRequired\":\"\",\"backingDataset\":\"\",\"organization\":\"leo1311\",\"groups\":[]},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},\"position_x\":\"90\",\"position_y\":\"30\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"DIbry\",\"elementPosition\":\"TopCenter\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"isValidation\":\"checkbox\",\"samplingRatio\":\"text\",\"applySchema\":\"checkbox\"},\"context\":[]}]}' WHERE NAME='LEOTCHCL17048' AND ORGANIZATION='leo1311';
            UPDATE mlpipeline SET json_content='{\"elements\":[{\"attributes\":{\"filetype\":\"Python3\",\"files\":[\"ACMKYPHR40814_leo1311.py\"],\"arguments\":[{\"name\":\"LEAPDS\",\"value\":\"leo1311\",\"type\":\"Datasource\",\"index\":\"1\"},{\"name\":\"TableName\",\"value\":\"@projectname_phrase_extraction\",\"type\":\"Text\",\"index\":\"2\",\"alias\":\"@projectname_phrase_extraction\"},{\"name\":\"EASEMapping\",\"value\":\"EASEMapping\",\"type\":\"Text\",\"alias\":\"EASEMapping\",\"index\":\"3\"}],\"dataset\":[]}}]}' WHERE NAME='ACMKYPHR40814' AND ORGANIZATION='leo1311';
			UPDATE mlworkflowspec SET wkspec='{\"jsondata\":{\"stage1\":{\"Question\":\"Choose Ticket Dataset\",\"QuestionComponent\":\"ChooseDatasetComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDatasetsviewComponent\",\"alias\":\"Datasets\"},\"input\":{},\"output\":{},\"Tab\":\"false\"},\"stage2\":{\"Question\":\"Choose Short Description Column\",\"QuestionComponent\":\"SingleselectComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDatasettableviewComponent\",\"alias\":\"Tickets\"},\"input\":{\"dataset\":\"\",\"inp1\":\"stage1\"},\"output\":{},\"Tab\":\"true\"},\"stage3\":{\"Question\":\"Choose Ticket Priority Column\",\"QuestionComponent\":\"SingleselectComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDatasettableviewComponent\",\"alias\":\"Tickets\"},\"input\":{\"dataset\":\"\",\"inp1\":\"stage1\"},\"output\":{},\"Tab\":\"false\"},\"stage4\":{\"Question\":\"Choose Ticket Status Column\",\"QuestionComponent\":\"SingleselectComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDatasettableviewComponent\",\"alias\":\"Tickets\"},\"input\":{\"inp1\":\"stage1\"},\"output\":{},\"Tab\":\"false\"},\"stage5\":{\"Question\":\"Choose Keywords Dataset\",\"QuestionComponent\":\"ChooseDatasetComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDatasetsviewComponent\",\"alias\":\"Datasets\"},\"input\":{},\"output\":{},\"Tab\":\"false\"},\"stage6\":{\"Question\":\"Keywords\",\"QuestionComponent\":\"NextComponent\",\"mandatory\":\"false\",\"WorkareaComponent\":{\"Component\":\"WkDatasettableviewComponent\",\"alias\":\"Keywords\"},\"input\":{\"dataset\":\"\",\"inp1\":\"stage5\"},\"output\":{},\"Tab\":\"true\"},\"stage7\":{\"Question\":\"Technology Classification\",\"QuestionComponent\":\"ExecuteComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkLogsComponent\",\"alias\":\"Logs\"},\"input\":{\"inp1\":\"\",\"type\":\"pipeline\",\"event\":\"TechClassify\",\"eventinp\":\"{\\\"Dataset Extractor\\\": {\\\"dataset\\\":\\\"stage1\\\"},\\\"Keyword\\\":{\\\"dataset\\\":\\\"stage5\\\"}}\",\"outputDataset\":\"\"},\"output\":{},\"Tab\":\"true\"},\"stage8\":{\"Question\":\"Classified  Tickets\",\"QuestionComponent\":\"NextComponent\",\"mandatory\":\"false\",\"WorkareaComponent\":{\"Component\":\"WkDatasettableviewComponent\",\"alias\":\"Classified Tickets\"},\"input\":{\"dataset\":\"LEOCLSFD45955\",\"inp1\":\"\"},\"output\":{},\"Tab\":\"true\"},\"stage9\":{\"Question\":\"Select Roster Dataset\",\"QuestionComponent\":\"ChooseDatasetComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDatasetsviewComponent\",\"alias\":\"Datasets\"},\"input\":{},\"output\":{},\"Tab\":\"false\"},\"stage10\":{\"Question\":\"Roster Transform\",\"QuestionComponent\":\"ExecuteComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkLogsComponent\",\"alias\":\"Logs\"},\"input\":{\"inp1\":\"\",\"type\":\"pipeline\",\"event\":\"RosterTransform\",\"eventinp\":\"{\\\"Roster Data\\\":\\\"stage9\\\"}\",\"outputDataset\":\"\"},\"output\":{},\"Tab\":\"false\"},\"stage11\":{\"Question\":\"Roster Data\",\"QuestionComponent\":\"NextComponent\",\"mandatory\":\"false\",\"WorkareaComponent\":{\"Component\":\"WkDatasettableviewComponent\",\"alias\":\"Roster Data\"},\"input\":{\"dataset\":\"LEORSTRD44115\",\"inp1\":\"\"},\"output\":{},\"Tab\":\"true\"},\"stage12\":{\"Question\":\"Assign Tickets\",\"QuestionComponent\":\"ExecuteComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkLogsComponent\",\"alias\":\"\"},\"input\":{\"inp1\":\"\",\"type\":\"pipeline\",\"event\":\"NextShiftAssign\",\"eventinp\":\"{}\",\"outputDataset\":\"\"},\"output\":{},\"Tab\":\"false\"},\"stage13\":{\"Question\":\"Assigned Tickets\",\"QuestionComponent\":\"EmptyComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDatasettableviewComponent\",\"alias\":\"Assigned Tickets\"},\"input\":{\"dataset\":\"LEOASGND43568\",\"inp1\":\"\"},\"output\":{},\"Tab\":\"true\"}}}' WHERE wkname='ShiftRoster';
            UPDATE mlworkflowspec SET wkspec='{\"jsondata\":{\"stage1\":{\"Question\":\"Choose Ticket Dataset\",\"QuestionComponent\":\"ChooseDatasetComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDatasetsviewComponent\",\"alias\":\"Dataset\"},\"input\":{},\"output\":{},\"Tab\":\"false\"},\"stage2\":{\"Question\":\"Clean Tickets\",\"QuestionComponent\":\"ExecuteComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkLogsComponent\",\"alias\":\"Logs\"},\"input\":{\"inp1\":\"\",\"type\":\"pipeline\",\"event\":\"CleanTickets\",\"eventinp\":\"{}\",\"outputDataset\":\"\"},\"output\":{},\"Tab\":\"true\"},\"stage3\":{\"Question\":\"Cleaned  Tickets\",\"QuestionComponent\":\"NextComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDatasettableviewComponent\",\"alias\":\"Cleaned Tickets\"},\"input\":{\"dataset\":\"TicketsEnriched\",\"inp1\":\"\"},\"output\":{},\"Tab\":\"true\"},\"stage4\":{\"Question\":\"Extract Phrases\",\"QuestionComponent\":\"ExecuteComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkLogsComponent\",\"alias\":\"Logs\"},\"input\":{\"inp1\":\"stage1\",\"type\":\"pipeline\",\"event\":\"PhraseExtraction\",\"eventinp\":\"{}\",\"outputDataset\":\"\"},\"output\":{},\"Tab\":\"false\"},\"stage5\":{\"Question\":\"Choose EASE Keywords Dataset\",\"QuestionComponent\":\"ChooseDatasetComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDatasetsviewComponent\",\"alias\":\"Dataset\"},\"input\":{},\"output\":{},\"Tab\":\"false\"},\"stage6\":{\"Question\":\"Map the Keyphrases with EASE categories\",\"QuestionComponent\":\"TextComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDatasettableviewComponent\",\"alias\":\"EASE MAPPING\"},\"input\":{\"dataset\":\"\",\"inp1\":\"stage5\"},\"output\":{},\"Tab\":\"true\"},\"stage7\":{\"Question\":\"Run Key Phrase Mapping\",\"QuestionComponent\":\"ExecuteComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDatasettableviewComponent\",\"alias\":\"EASE Mapping\"},\"input\":{\"inp1\":\"stage5\",\"type\":\"pipeline\",\"event\":\"Keyphrase\",\"eventinp\":\"{}\",\"outputDataset\":\"\",\"dataset\":\"\"},\"output\":{},\"Tab\":\"false\"},\"stage8\":{\"Question\":\"Dashboard\",\"QuestionComponent\":\"EmptyComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDashboardComponent\",\"alias\":\"Dashboard\"},\"input\":{\"dashboardname\":\"EASE Analytics\"},\"output\":{},\"Tab\":\"true\"}}}' WHERE wkname='EASE';
            UPDATE mlworkflowspec SET wkspec='{\"jsondata\":{\"stage1\":{\"Question\":\"Choose Dataset\",\"QuestionComponent\":\"ChooseDatasetComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDatasetsviewComponent\",\"alias\":\"Choose Dataset\"},\"input\":{},\"output\":{},\"Tab\":\"false\"},\"stage2\":{\"Question\":\"Run Clean Tickets Pipeline\",\"QuestionComponent\":\"ExecuteComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkLogsComponent\",\"alias\":\"Logs\"},\"input\":{\"inp1\":\"\",\"type\":\"pipeline\",\"event\":\"CleanTickets\",\"eventinp\":\"{}\",\"outputDataset\":\"\"},\"output\":{},\"Tab\":\"true\"},\"stage3\":{\"Question\":\"Cleaned  Tickets\",\"QuestionComponent\":\"NextComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDatasettableviewComponent\",\"alias\":\"Cleaned  Tickets\"},\"input\":{\"dataset\":\"TicketsEnriched\",\"inp1\":\"\"},\"output\":{},\"Tab\":\"true\"},\"stage4\":{\"Question\":\"Run Extract Words Pipeline\",\"QuestionComponent\":\"ExecuteComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDatasettableviewComponent\",\"alias\":\"Logs\"},\"input\":{\"inp1\":\"\",\"type\":\"\",\"event\":\"ExtractWords\",\"eventinp\":\"{}\",\"outputDataset\":\"\",\"dataset\":\"ACMTCKTS76661\"},\"output\":{},\"Tab\":\"false\"},\"stage5\":{\"Question\":\"Choose stop words to remove from word corpus?\",\"QuestionComponent\":\"EmptyComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"DataCorpusViewComponent\",\"alias\":\"Word Corpus\"},\"input\":{\"dataset\":\"LEOINVRT55362\",\"inp1\":\"\"},\"output\":{},\"Tab\":\"true\"},\"stage6\":{\"Question\":\"Run Stop Words Remover Pipeline\",\"QuestionComponent\":\"ExecuteComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"DataCorpusViewComponent\",\"alias\":\"Logs\"},\"input\":{\"inp1\":\"\",\"type\":\"\",\"event\":\"StopWords\",\"eventinp\":\"{\\\"Stop  Words  Remover\\\": { \\\"stopWords\\\": \\\"stage5\\\"} }\",\"outputDataset\":\"\",\"dataset\":\"LEOINVRT55362\"},\"output\":{},\"Tab\":\"false\"},\"stage7\":{\"Question\":\"Stop Words Removed from CleanedText\",\"QuestionComponent\":\"NextComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDatasettableviewComponent\",\"alias\":\"CleanedText\"},\"input\":{\"dataset\":\"\",\"inp1\":\"\"},\"output\":{},\"Tab\":\"false\"},\"stage8\":{\"Question\":\"Run Phrase Extraction Pipeline\",\"QuestionComponent\":\"ExecuteComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"DataCorpusViewComponent\",\"alias\":\"Logs\"},\"input\":{\"inp1\":\"\",\"type\":\"\",\"event\":\"PhraseExtraction\",\"eventinp\":\"{}\",\"outputDataset\":\"\",\"dataset\":\"LEOINVRT55362\"},\"output\":{},\"Tab\":\"false\"},\"stage9\":{\"Question\":\"Map the Keyphrases with categories\",\"QuestionComponent\":\"NextComponent\",\"mandatory\":\"false\",\"WorkareaComponent\":{\"Component\":\"WkDatasettableviewComponent\",\"alias\":\"Mapping\"},\"input\":{\"dataset\":\"ACMESMPN85731\",\"inp1\":\"\"},\"output\":{},\"Tab\":\"true\"},\"stage10\":{\"Question\":\"Run Key phrase mapping Pipeline\",\"QuestionComponent\":\"ExecuteComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDatasettableviewComponent\",\"alias\":\"Logs\"},\"input\":{\"inp1\":\"\",\"type\":\"\",\"event\":\"Keyphrase\",\"eventinp\":\"{}\",\"outputDataset\":\"\",\"dataset\":\"ACMESMPN85731\"},\"output\":{},\"Tab\":\"false\"},\"stage11\":{\"Question\":\"Run Ticket Clustering \",\"QuestionComponent\":\"ExecuteComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDatasettableviewComponent\",\"alias\":\"Ticket  Clustering\"},\"input\":{\"inp1\":\"\",\"type\":\"\",\"event\":\"TicketClustering\",\"eventinp\":\"{}\",\"outputDataset\":\"\",\"dataset\":\"ACMESMPN85731\"},\"output\":{},\"Tab\":\"false\"},\"stage12\":{\"Question\":\"Ticket Clustering Summary\",\"QuestionComponent\":\"EmptyComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDashboardComponent\",\"alias\":\"Summary\"},\"input\":{\"dashboardname\":\"Ticket Cluster\"},\"output\":{},\"Tab\":\"true\"}}}' WHERE wkname='TicketClustering';
        	INSERT into mlschemaregistry (name,organization,alias) VALUES ("LEOCSMNG44245","leo1311","IT Issues Schema") ON DUPLICATE KEY UPDATE name="LEOCSMNG44245";
			UPDATE mlschemaregistry SET schemavalue = '[{\"columntype\":\"varchar\",\"columnorder\":2,\"recordcolumnname\":\"short_description\",\"recordcolumndisplayname\":\"Short Description\",\"isunique\":false,\"isrequired\":false},{\"columntype\":\"varchar\",\"columnorder\":3,\"recordcolumnname\":\"location\",\"recordcolumndisplayname\":\"Location\",\"isunique\":false,\"isrequired\":false},{\"columntype\":\"varchar\",\"columnorder\":4,\"recordcolumnname\":\"severity\",\"recordcolumndisplayname\":\"Severity\",\"isunique\":false,\"isrequired\":false},{\"columntype\":\"varchar\",\"columnorder\":5,\"recordcolumnname\":\"requested_by\",\"recordcolumndisplayname\":\"Requested By\",\"isunique\":false,\"isrequired\":false},{\"columntype\":\"varchar\",\"columnorder\":6,\"recordcolumnname\":\"category\",\"recordcolumndisplayname\":\"Category\",\"isunique\":false,\"isrequired\":false},{\"columntype\":\"varchar\",\"columnorder\":7,\"recordcolumnname\":\"assignment_group\",\"recordcolumndisplayname\":\"Assignment Group\",\"isunique\":false,\"isrequired\":false},{\"columntype\":\"varchar\",\"columnorder\":8,\"recordcolumnname\":\"special_instructions\",\"recordcolumndisplayname\":\"Special Instructions\",\"isunique\":false,\"isrequired\":false}]' WHERE name="LEOCSMNG44245";
			
			UPDATE mldataset SET attributes = '{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from case_management\",\"Cacheable\":false,\"isStreaming\":\"false\",\"Headers\":\"\",\"defaultValues\":\"\",\"QueryParams\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"case_management\",\"uniqueIdentifier\":\"BID\"}' WHERE name="LEOCSMNG76939";
        </sql>			
	</changeSet>
		<changeSet author="Leap (generated)" id="2v1-cip-366324">
    <sqlFile dbms="mysql,postgresql" endDelimiter=";" path="db/changelog/aip/data/2v1/cip/mlschemaformtemplates.sql" splitStatements="true"/>
	<sqlFile dbms="mssql" endDelimiter=";" path="db/changelog/aip/data/2v1/cip/mlschemaformtemplates-mssql.sql" splitStatements="true"/>
</changeSet>
<changeSet dbms="h2" author="Leap (generated)" id="2v1-cip-366346">
    <loadData commentLineStartsWith="#" encoding="UTF-8" file="db/changelog/aip/data/2v1/cip/mlschemaformtemplates.csv" quotchar="&quot;" separator="," tableName="mlschemaformtemplates">
        <column header="name" name="name" type="STRING"/>
        <column header="schemaname" name="schemaname" type="STRING"/>
        <column header="formtemplate" name="formtemplate" type="STRING"/>
        <column header="organization" name="organization" type="STRING"/>
        
    </loadData>
</changeSet>
<changeSet author="Leap (generated)" id="2v1-cip-366325">
    <loadData commentLineStartsWith="#" encoding="UTF-8" file="db/changelog/aip/data/2v1/cip/mldatasetformmapping.csv" quotchar="&quot;" separator="," tableName="mldatasetformmapping">
        <column header="dataset" name="dataset" type="STRING"/>
        <column header="formtemplate" name="formtemplate" type="STRING"/>
        <column header="organization" name="organization" type="STRING"/>
        
    </loadData>
</changeSet>
<changeSet author="Leap (generated)" id="2v1-cip-366326">
    <loadData commentLineStartsWith="#" encoding="UTF-8" file="db/changelog/aip/data/2v1/cip/mlmashups.csv" quotchar="&quot;" separator="," tableName="mlmashups">
        <column header="name" name="name" type="STRING"/>
        <column header="template" name="template" type="STRING"/>
        <column header="organization" name="organization" type="STRING"/>
        
    </loadData>
</changeSet>
<changeSet author="Leap" id="2v1-cip-366327">
	<sql dbms="mysql,h2,postgresql" splitStatements="true" stripComments="true">  
		UPDATE mldataset SET attributes='{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from @projectname_tickets_enriched\",\"Cacheable\":false,\"isStreaming\":\"false\",\"Headers\":\"\",\"defaultValues\":\"\",\"QueryParams\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"@projectname_tickets_enriched\",\"uniqueIdentifier\":\"number\"}' WHERE name='ACMTCKTS76661' AND organization='leo1311';
       </sql>			
</changeSet>

<changeSet author="Leap" id="2v1-cip-366328">
	<sql dbms="mysql,h2,postgresql" splitStatements="true" stripComments="true">
		UPDATE mlplugin SET plugin='[{\"requiredJars\": [], \"formats\": { \"inputCol\": \"text\", \"outputCol\": \"text\", \"vocabSize\": \"text\" }, \"classname\": \"CountVectorizerFeatureExtractorConfig\", \"name\": \"Count Vectorizer\", \"alias\": \"Count Vectorizer\", \"attributes\": { \"inputCol\": \"\", \"outputCol\": \"\", \"vocabSize\": \"\" }, \"id\": 0, \"category\": \"FeatureExtractorConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"inputCol\": \"text\", \"outputCol\": \"text\" }, \"classname\": \"TfFeatureExtractorConfig\", \"name\": \"TF\", \"alias\": \"TF\", \"attributes\": { \"inputCol\": \"\", \"outputCol\": \"\" }, \"id\": 0, \"category\": \"FeatureExtractorConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"inputCol\": \"text\", \"outputCol\": \"text\" }, \"classname\": \"IdfFeatureExtractorConfig\", \"name\": \"IDF\", \"alias\": \"IDF\", \"attributes\": { \"inputCol\": \"\", \"outputCol\": \"\" }, \"id\": 0, \"category\": \"FeatureExtractorConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"script\": \"textarea\" }, \"classname\": \"PythonScriptTransformerConfig\", \"name\": \"Python Script Transformer\", \"alias\": \"Python Script Transformer\", \"attributes\": { \"script\": [ \"import logging\\r\", \"class CustomPythonClass():\\r\", \" def __main__(self, dataset):\\r\", \" \\r\", \" return dataset\" ] }, \"id\": 0, \"category\": \"TransformerConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"inputCol\": \"textarea\", \"outputCol\": \"textarea\", \"tags\": \"textarea\" }, \"classname\": \"WordLemmetizerTransformerConfig\", \"name\": \"Word Lemmetizer\", \"alias\": \"Word Lemmetizer\", \"attributes\": { \"inputCol\": \"\", \"outputCol\": \"\", \"tags\": \"\" }, \"id\": 0, \"category\": \"TransformerConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"inputCol\": \"textarea\", \"outputCol\": \"textarea\" }, \"classname\": \"WordStemmerTransformerConfig\", \"name\": \"Word Stemmer\", \"alias\": \"Word Stemmer\", \"attributes\": { \"inputCol\": \"\", \"outputCol\": \"\" }, \"id\": 0, \"category\": \"TransformerConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"smoothing\": \"text\", \"modelType\": \"text\" }, \"classname\": \"NaiveBayesTransformerConfig\", \"name\": \"Naive Bayes\", \"alias\": \"Naive Bayes\", \"attributes\": { \"smoothing\": \"\", \"modelType\": \"\" }, \"id\": 0, \"category\": \"TransformerConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"inputCol\": \"text\", \"outputCol\": \"text\" }, \"classname\": \"TokenizerTransformerConfig\", \"name\": \"Tokenizer\", \"alias\": \"Tokenizer\", \"attributes\": { \"inputCol\": \"\", \"outputCol\": \"\" }, \"id\": 0, \"category\": \"TransformerConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"inputCol\": \"text\", \"outputCol\": \"text\", \"pattern\": \"text\" }, \"classname\": \"RegexTokenizerTransformerConfig\", \"name\": \"Regex Tokenizer\", \"alias\": \"Regex Tokenizer\", \"attributes\": { \"inputCol\": \"\", \"outputCol\": \"\", \"pattern\": \"\" }, \"id\": 0, \"category\": \"TransformerConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"inputCols\": \"text\", \"outputCol\": \"text\" }, \"classname\": \"VectorAssemblerTransformerConfig\", \"name\": \"Vector Assembler\", \"alias\": \"Vector Assembler\", \"attributes\": { \"inputCols\": \"\", \"outputCol\": \"\" }, \"id\": 0, \"category\": \"TransformerConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"inputCol\": \"text\", \"outputCol\": \"text\", \"withStd\": \"text\", \"withMean\": \"text\" }, \"classname\": \"StandardScalerTransformerConfig\", \"name\": \"Standard Scaler\", \"alias\": \"Standard Scaler\", \"attributes\": { \"inputCol\": \"\", \"outputCol\": \"\", \"withStd\": \"\", \"withMean\": \"\" }, \"id\": 0, \"category\": \"TransformerConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"inputCol\": \"text\", \"outputCol\": \"text\", \"K\": \"text\" }, \"classname\": \"PCATransformerConfig\", \"name\": \"PCA\", \"alias\": \"PCA\", \"attributes\": { \"inputCol\": \"\", \"outputCol\": \"\", \"K\": \"\" }, \"id\": 0, \"category\": \"TransformerConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"inputCol\": \"text\", \"outputCol\": \"text\", \"K\": \"text\" }, \"classname\": \"KMeansTransformerConfig\", \"name\": \"K Means\", \"alias\": \"K Means\", \"attributes\": { \"inputCol\": \"\", \"outputCol\": \"\", \"K\": \"\" }, \"id\": 0, \"category\": \"TransformerConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"inputCol\": \"text\", \"checkpointInterval\": \"text\", \"K\": \"text\" }, \"classname\": \"LDAConfig\", \"name\": \"LDA\", \"alias\": \"LDA\", \"attributes\": { \"inputCol\": \"\", \"checkpointInterval\": \"\", \"K\": \"\" }, \"id\": 0, \"category\": \"TransformerConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"modelName\": \"text\" }, \"classname\": \"ModelSinkConfig\", \"name\": \"Model Sink\", \"alias\": \"Model Sink\", \"attributes\": { \"modelName\": \"\" }, \"id\": 0, \"category\": \"BaseConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"modelName\": \"text\" }, \"classname\": \"ModelSourceConfig\", \"name\": \"Model Source\", \"alias\": \"Model Source\", \"attributes\": { \"modelName\": \"\" }, \"id\": 0, \"category\": \"BaseConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"params\": \"textarea\", \"script\": \"textarea\" }, \"classname\": \"PostProcessingScriptConfig\", \"name\": \"Post Processing Script\", \"alias\": \"Post Processing Script\", \"attributes\": { \"params\": \"\", \"script\": \"\" }, \"id\": 0, \"category\": \"BaseConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\", \"out2\" ] }, { \"requiredJars\": [], \"formats\": { \"params\": \"textarea\", \"script\": \"textarea\" }, \"classname\": \"PreProcessingScriptConfig\", \"name\": \"Pre Processing Script\", \"alias\": \"Pre Processing Script\", \"attributes\": { \"params\": \"\", \"script\": \"\" }, \"id\": 0, \"category\": \"BaseConfig\", \"inputEndpoints\": [ \"dataset1\", \"dataset2\", \"dataset3\" ], \"outputEndpoints\": [ \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"labelCol\": \"text\", \"featuresCol\": \"text\", \"numTrees\": \"text\" }, \"classname\": \"RandomForestClassifierConfig\", \"name\": \"Random Forest Classifier\", \"alias\": \"Random Forest Classifier\", \"attributes\": { \"labelCol\": \"\", \"featuresCol\": \"\", \"numTrees\": \"\" }, \"id\": 0, \"category\": \"AnalyzerConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"inputCol\": \"text\", \"outputCol\": \"text\", \"stopWords\": \"text\" }, \"classname\": \"StopWordsRemoverTransformerConfig\", \"name\": \"Stop Words Remover\", \"alias\": \"Stop Words Remover\", \"attributes\": { \"inputCol\": \"\", \"outputCol\": \"\", \"stopWords\": \"\" }, \"id\": 0, \"category\": \"TransformerConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"n\": \"text\", \"inputCol\": \"text\", \"outputCol\": \"text\" }, \"classname\": \"NgramTransformerConfig\", \"name\": \"N Gram\", \"alias\": \"N Gram\", \"attributes\": { \"n\": \"\", \"inputCol\": \"\", \"outputCol\": \"\" }, \"id\": 0, \"category\": \"TransformerConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"inputCol\": \"text\", \"outputCol\": \"text\", \"inverse\": \"text\" }, \"classname\": \"DiscreteCosineTransformTransformerConfig\", \"name\": \"Discrete Cosine Transform\", \"alias\": \"Discrete Cosine Transform\", \"attributes\": { \"inputCol\": \"\", \"outputCol\": \"\", \"inverse\": \"\" }, \"id\": 0, \"category\": \"TransformerConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"inputCols\": \"text\", \"outputCols\": \"text\" }, \"classname\": \"StringIndexerTransformerConfig\", \"name\": \"String Indexer\", \"alias\": \"String Indexer\", \"attributes\": { \"inputCols\": \"\", \"outputCols\": \"\" }, \"id\": 0, \"category\": \"TransformerConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"inputCol\": \"text\", \"outputCol\": \"text\", \"p\": \"text\" }, \"classname\": \"NormalizerTransformerConfig\", \"name\": \"Normalizer\", \"alias\": \"Normalizer\", \"attributes\": { \"inputCol\": \"\", \"outputCol\": \"\", \"p\": \"\" }, \"id\": 0, \"category\": \"TransformerConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"inputCol\": \"text\", \"outputCol\": \"text\" }, \"classname\": \"MinMaxScalerTransformerConfig\", \"name\": \"Min Max Scaler\", \"alias\": \"Min Max Scaler\", \"attributes\": { \"inputCol\": \"\", \"outputCol\": \"\" }, \"id\": 0, \"category\": \"TransformerConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"statement\": \"text\" }, \"classname\": \"SQLTransformerConfig\", \"name\": \"SQL Transformer\", \"alias\": \"SQL Transformer\", \"attributes\": { \"statement\": \"\" }, \"id\": 0, \"category\": \"TransformerConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"inputCols\": \"text\" }, \"classname\": \"AnomolyDetectionConfig\", \"name\": \"Anomoly Detection\", \"alias\": \"Anomoly Detection\", \"attributes\": { \"inputCols\": \"\" }, \"id\": 0, \"category\": \"DomainSolutionConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"inputCols\": \"text\", \"predictionCount\": \"text\", \"seasonality\": \"text\" }, \"classname\": \"ARIMAModelConfig\", \"name\": \"ARIMA\", \"alias\": \"ARIMA\", \"attributes\": { \"inputCol\": \"\", \"predictionCount\": \"\", \"seasonality\": \"\" }, \"id\": 0, \"category\": \"DomainSolutionConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"inputCols\": \"text\", \"predictionCount\": \"text\", \"groupCol\": \"text\" }, \"classname\": \"ARIMAGroupedConfig\", \"name\": \"ARIMA Grouped\", \"alias\": \"ARIMA Grouped\", \"attributes\": { \"inputCol\": \"\", \"predictionCount\": \"\", \"groupCol\": \"\" }, \"id\": 0, \"category\": \"DomainSolutionConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"inputCols\": \"text\", \"outputCol\": \"text\", \"ambiguousWords\": \"text\" }, \"classname\": \"CleanTicketsConfig\", \"name\": \"Clean Tickets\", \"alias\": \"Clean Tickets\", \"attributes\": { \"inputCols\": \"\", \"outputCol\": \"clean_text\", \"ambiguousWords\": \"\" }, \"id\": 0, \"category\": \"DomainSolutionConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"UniqueIdColumn\": \"text\", \"GroupByColumn\": \"text\", \"TextColumn\": \"text\", \"customStopWords\": \"text\", \"vocabSize\": \"text\", \"ClusterCount\": \"text\", \"checkPointInterval\": \"text\", \"saveModels\": \"checkbox\" }, \"classname\": \"IncidentClusteringLDAConfig\", \"name\": \"Incident Clustering\", \"alias\": \"Incident Clustering\", \"attributes\": { \"UniqueIdColumn\": \"\", \"GroupByColumn\": \"\", \"TextColumn\": \"\", \"customStopWords\": \"\", \"vocabSize\": \"\", \"ClusterCount\": \"\", \"checkPointInterval\": \"\", \"saveModels\": \"\" }, \"id\": 0, \"category\": \"DomainSolutionConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"topics\", \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"inputCols\": \"text\" }, \"classname\": \"PhishingDetectionConfig\", \"name\": \"Phishing Detection\", \"alias\": \"Phishing Detection\", \"attributes\": { \"inputCols\": \"\" }, \"id\": 0, \"category\": \"DomainSolutionConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"inputCols\": \"text\", \"labelCol\": \"text\" }, \"classname\": \"FeatureSelectionConfig\", \"name\": \"Feature Selection\", \"alias\": \"Feature Selection\", \"attributes\": { \"inputCols\": \"\", \"labelCol\": \"\" }, \"id\": 0, \"category\": \"DomainSolutionConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"inputCols\": \"text\", \"labelCol\": \"text\", \"modelName\":\"text\" }, \"classname\": \"RegressionConfig\", \"name\": \"Regression\", \"alias\": \"Regression\", \"attributes\": { \"inputCols\": \"\", \"labelCol\": \"\", \"modelName\":\"\" }, \"id\": 0, \"category\": \"DomainSolutionConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"inputCols\": \"text\", \"labelCol\": \"text\", \"modelName\":\"text\" }, \"classname\": \"ClassificationConfig\", \"name\": \"Classification\", \"alias\": \"Classification\", \"attributes\": { \"inputCols\": \"\", \"labelCol\": \"\", \"modelName\": \"\" }, \"id\": 0, \"category\": \"DomainSolutionConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"labelCol\": \"text\", \"featuresCol\": \"text\" }, \"classname\": \"LogisticRegressionConfig\", \"name\": \"Logistic Regression\", \"alias\": \"Logistic Regression\", \"attributes\": { \"labelCol\": \"\", \"featuresCol\": \"\" }, \"id\": 0, \"category\": \"AnalyzerConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"labelCol\": \"text\", \"featuresCol\": \"text\" }, \"classname\": \"DecisionTreeClassifierConfig\", \"name\": \"Decision Tree Classifier\", \"alias\": \"Decision Tree Classifier\", \"attributes\": { \"labelCol\": \"\", \"featuresCol\": \"\" }, \"id\": 0, \"category\": \"AnalyzerConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"labelCol\": \"text\", \"featuresCol\": \"text\", \"maxIter\": \"text\" }, \"classname\": \"GBTClassifierConfig\", \"name\": \"GBT Classifier\", \"alias\": \"GBT Classifier\", \"attributes\": { \"labelCol\": \"\", \"featuresCol\": \"\", \"maxIter\": \"\" }, \"id\": 0, \"category\": \"AnalyzerConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"labelCol\": \"text\", \"featuresCol\": \"text\", \"maxIter\": \"text\", \"regParam\": \"text\" }, \"classname\": \"LinearSVCConfig\", \"name\": \"Linear SVC\", \"alias\": \"Linear SVC\", \"attributes\": { \"labelCol\": \"\", \"featuresCol\": \"\", \"maxIter\": \"\", \"regParam\": \"\" }, \"id\": 0, \"category\": \"AnalyzerConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"labelCol\": \"text\", \"featuresCol\": \"text\", \"maxIter\": \"text\", \"regParam\": \"text\", \"elasticNetParam\": \"text\" }, \"classname\": \"LinearRegressionConfig\", \"name\": \"Linear Regression\", \"alias\": \"Linear Regression\", \"attributes\": { \"labelCol\": \"\", \"featuresCol\": \"\", \"maxIter\": \"\", \"regParam\": \"\", \"elasticNetParam\": \"\" }, \"id\": 0, \"category\": \"AnalyzerConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"featuresCol\": \"text\", \"labelCol\": \"text\" }, \"classname\": \"RandomForestRegressorConfig\", \"name\": \"Random Forest Regressor\", \"alias\": \"Random Forest Regressor\", \"attributes\": { \"featuresCol\": \"\", \"labelCol\": \"\" }, \"id\": 0, \"category\": \"AnalyzerConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"dataset\": \"dropdown\", \"isValidation\": \"checkbox\", \"samplingRatio\": \"text\", \"applySchema\": \"checkbox\" }, \"classname\": \"DatasetExtractorConfig\", \"name\": \"Dataset Extractor\", \"alias\": \"Dataset Dataset\", \"attributes\": { \"dataset\": \"\", \"isValidation\": \"\", \"samplingRatio\": \"\", \"applySchema\": false }, \"id\": 0, \"category\": \"ExtractorConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"inputCol\": \"text\", \"outputCol\": \"text\", \"seed\": \"text\" }, \"classname\": \"Word2VecFeatureExtractorConfig\", \"name\": \"Word2Vec\", \"alias\": \"Word2Vec\", \"attributes\": { \"inputCol\": \"\", \"outputCol\": \"\", \"seed\": \"\" }, \"id\": 0, \"category\": \"FeatureExtractorConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"inputCols\": \"text\", \"outputCol\": \"text\", \"categoricalCols\": \"text\" }, \"classname\": \"FeatureHasherFeatureExtractorConfig\", \"name\": \"FeatureHasher\", \"alias\": \"FeatureHasher\", \"attributes\": { \"inputCols\": \"\", \"outputCol\": \"\", \"categoricalCols\": \"\" }, \"id\": 0, \"category\": \"FeatureExtractorConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"inputCol\": \"text\", \"outputCol\": \"text\" }, \"classname\": \"BinarizerTransformerConfig\", \"name\": \"Binarizer\", \"alias\": \"Binarizer\", \"attributes\": { \"inputCol\": \"\", \"outputCol\": \"\" }, \"id\": 0, \"category\": \"TransformerConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"inputCol\": \"text\", \"outputCol\": \"text\" }, \"classname\": \"PolynomialExpansionConfig\", \"name\": \"PolynomialExpansion\", \"alias\": \"PolynomialExpansion\", \"attributes\": { \"inputCol\": \"\", \"outputCol\": \"\" }, \"id\": 0, \"category\": \"TransformerConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"inputCol\": \"text\", \"outputCol\": \"text\", \"labels\": \"text\" }, \"classname\": \"IndexToStringTransformerConfig\", \"name\": \"IndexToString\", \"alias\": \"IndexToString\", \"attributes\": { \"inputCol\": \"\", \"outputCol\": \"\", \"labels\": \"\" }, \"id\": 0, \"category\": \"TransformerConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"inputCols\": \"text\", \"outputCols\": \"text\" }, \"classname\": \"OneHotEncoderEstimatorTransformerConfig\", \"name\": \"OneHotEncoderEstimator\", \"alias\": \"OneHotEncoderEstimator\", \"attributes\": { \"inputCols\": \"\", \"outputCols\": \"\" }, \"id\": 0, \"category\": \"TransformerConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"inputCol\": \"text\", \"outputCol\": \"text\" }, \"classname\": \"VectorIndexerTransformerConfig\", \"name\": \"VectorIndexer\", \"alias\": \"VectorIndexer\", \"attributes\": { \"inputCol\": \"\", \"outputCol\": \"\" }, \"id\": 0, \"category\": \"TransformerConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"inputCol\": \"text\", \"outputCol\": \"text\" }, \"classname\": \"MaxAbsScalerTransformerConfig\", \"name\": \"MaxAbsScaler\", \"alias\": \"MaxAbsScaler\", \"attributes\": { \"inputCol\": \"\", \"outputCol\": \"\" }, \"id\": 0, \"category\": \"TransformerConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"inputCol\": \"text\", \"outputCol\": \"text\", \"splits\": \"text\" }, \"classname\": \"BucketizerTransformerConfig\", \"name\": \"Bucketizer\", \"alias\": \"Bucketizer\", \"attributes\": { \"inputCol\": \"\", \"outputCol\": \"\", \"splits\": \"\" }, \"id\": 0, \"category\": \"TransformerConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"inputCol\": \"text\", \"outputCol\": \"text\", \"scalingVec\": \"text\" }, \"classname\": \"ElementWiseProductTransformerConfig\", \"name\": \"ElementWiseProduct\", \"alias\": \"ElementWiseProduct\", \"attributes\": { \"inputCol\": \"\", \"outputCol\": \"\", \"scalingVec\": \"\" }, \"id\": 0, \"category\": \"TransformerConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"inputCol\": \"text\", \"size\": \"text\" }, \"classname\": \"VectorSizeHintTransformerConfig\", \"name\": \"VectorSizeHint\", \"alias\": \"VectorSizeHint\", \"attributes\": { \"inputCol\": \"\", \"size\": \"\" }, \"id\": 0, \"category\": \"TransformerConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"dataset\": \"dropdown\", \"applySchema\": \"checkbox\" }, \"classname\": \"DatasetLoaderConfig\", \"name\": \"Dataset Loader\", \"alias\": \"Dataset Loader\", \"attributes\": { \"dataset\": \"\", \"applySchema\": false }, \"id\": 0, \"category\": \"LoaderConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"query\": \"text\" }, \"classname\": \"HiveExtractorConfig\", \"name\": \"Hive Extractor\", \"alias\": \"Hive Extractor\", \"attributes\": { \"query\": \"\" }, \"id\": 0, \"category\": \"ExtractorConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"tableName\": \"text\", \"writeMode\": \"text\" }, \"classname\": \"HiveLoaderConfig\", \"name\": \"Hive Loader\", \"alias\": \"Hive Loader\", \"attributes\": { \"tableName\": \"\", \"writeMode\": \"\" }, \"id\": 0, \"category\": \"LoaderConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\" ] }, { \"requiredJars\": [], \"formats\": { \"arguments\": \"text\", \"id\": \"text\" }, \"classname\": \"XYZ_test\", \"name\": \"XYZ_test\", \"alias\": \"XYZ_test\", \"attributes\": { \"arguments\": \"\", \"id\": \"\" }, \"id\": 0, \"category\": \"TransformerConfig\", \"inputEndpoints\": [ \"in\" ], \"outputEndpoints\": [ \"out\" ] }]' WHERE type='DragAndDrop';
	</sql>			
</changeSet>
<changeSet author="Leap" id="2v1-cip-366332">
	<sql dbms="mysql,h2,postgresql" splitStatements="true" stripComments="true">
		UPDATE mldataset SET attributes='{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT EASE , ROUND((CAST(COUNT(*) AS FLOAT )/CAST((SELECT COUNT(*) FROM @projectname_tickets ) AS FLOAT))*100,2) AS COUNT FROM @projectname_phrase_extraction te JOIN @projectname_EASEMapping map ON te.mapped_phrase =map.Key_Word GROUP BY ease\",\"Cacheable\":false,\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"}' WHERE NAME='DistributionByEASE' AND ORGANIZATION='leo1311';
		UPDATE mldataset SET attributes='{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT category,COUNT(*), ROUND((COUNT(*)/(SELECT COUNT(*) FROM @projectname_tickets )*100),2) AS percent FROM @projectname_phrase_extraction te JOIN @projectname_EASEMapping map ON te.mapped_phrase =map.Key_Word WHERE ease = {ease} GROUP BY category order by count(*) desc\",\"Cacheable\":\"false\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{\'ease\':\'ease\'}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"}' WHERE NAME='ease_ditributionByCategory' AND ORGANIZATION='leo1311';
		UPDATE mldataset SET attributes='{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT REPLACE(mapped_phrase,\' \', \'_\') as PHRASE FROM @projectname_phrase_extraction te JOIN @projectname_EASEMapping map ON te.mapped_phrase =map.Key_Word WHERE ease = {ease}\",\"Cacheable\":false,\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{\'ease\':\'ease\'}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"}' WHERE NAME='ease_wordcloud' AND ORGANIZATION='leo1311';
		UPDATE mldataset SET attributes='{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT SUM(COUNT) AS COUNT, SUM(percent) AS PERCENT FROM (SELECT EASE,COUNT(*) AS COUNT, ROUND((CAST(COUNT(*) AS FLOAT )/CAST((SELECT COUNT(*) FROM @projectname_tickets ) AS FLOAT))*100,2) AS PERCENT FROM @projectname_phrase_extraction te JOIN @projectname_EASEMapping map ON te.mapped_phrase =map.Key_Word WHERE ease = {ease} AND ease!=\'\' AND ease IS NOT NULL GROUP BY ease) as ta\",\"Cacheable\":false,\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{\'ease\':\'ease\'}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"}' WHERE NAME='ease_TotalTickets' AND ORGANIZATION='leo1311';
		UPDATE mldataset SET attributes='{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT mapped_phrase AS KEYWORD, COUNT(*) as COUNT, ROUND((CAST(COUNT(*) AS FLOAT )/CAST((SELECT COUNT(*) FROM @projectname_tickets ) AS FLOAT))*100,2) AS PERCENT FROM @projectname_phrase_extraction te JOIN @projectname_EASEMapping map ON te.mapped_phrase =map.Key_Word WHERE ease = {ease} GROUP BY mapped_phrase ORDER BY COUNT(*) DESC\",\"Cacheable\":false,\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{\'ease\':\'ease\'}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"}' WHERE NAME='ease_distributionByKeyword' AND ORGANIZATION='leo1311';
		UPDATE mldataset SET attributes='{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT Number, extracted_phrase as Pattern , mapped_phrase as Keyword, Category , EASE , CONCAT(ROUND( mapped_phrase_confidennce*100 ,2) ,\'%\')AS ConfidenceScore FROM @projectname_phrase_extraction te JOIN @projectname_EASEMapping map ON te.mapped_phrase =map.Key_Word WHERE ease = {ease} ORDER BY mapped_phrase_confidennce DESC\",\"Cacheable\":false,\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{\'ease\':\'ease\'}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"}' WHERE NAME='ease_tickets' AND ORGANIZATION='leo1311';
		UPDATE mldataset SET attributes='{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from @projectname_EASEMapping\",\"Cacheable\":false,\"isStreaming\":\"false\",\"Headers\":\"\",\"defaultValues\":\"\",\"QueryParams\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"@projectname_EASEMapping\",\"uniqueIdentifier\":\"\"}' WHERE NAME ='ACMESMPN85731';
	</sql>	
</changeSet>
<changeSet author="Leap" id="2v1-cip-366334">
	<sql dbms="mysql,h2,postgresql" splitStatements="true" stripComments="true">  
		UPDATE mlworkflowspec SET wkspec='{\"jsondata\":{\"stage1\":{\"Question\":\"Choose Ticket Dataset\",\"QuestionComponent\":\"ChooseDatasetComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDatasetsviewComponent\",\"alias\":\"Dataset\"},\"input\":{},\"output\":{},\"Tab\":\"false\"},\"stage2\":{\"Question\":\"Clean Tickets\",\"QuestionComponent\":\"ExecuteComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkLogsComponent\",\"alias\":\"Logs\"},\"input\":{\"inp1\":\"\",\"type\":\"pipeline\",\"event\":\"CleanTickets\",\"eventinp\":\"{}\",\"outputDataset\":\"\"},\"output\":{},\"Tab\":\"true\"},\"stage3\":{\"Question\":\"Cleaned  Tickets\",\"QuestionComponent\":\"NextComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDatasettableviewComponent\",\"alias\":\"Cleaned Tickets\"},\"input\":{\"dataset\":\"ACMTCKTS76661\",\"inp1\":\"\"},\"output\":{},\"Tab\":\"true\"},\"stage4\":{\"Question\":\"Extract Phrases\",\"QuestionComponent\":\"ExecuteComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDatasettableviewComponent\",\"alias\":\"Cleaned Tickets\"},\"input\":{\"inp1\":\"\",\"type\":\"pipeline\",\"event\":\"PhraseExtraction\",\"eventinp\":\"{}\",\"outputDataset\":\"\",\"dataset\":\"ACMTCKTS76661\"},\"output\":{},\"Tab\":\"false\"},\"stage5\":{\"Question\":\"Choose EASE Keywords Dataset\",\"QuestionComponent\":\"ChooseDatasetComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDatasetsviewComponent\",\"alias\":\"Dataset\"},\"input\":{},\"output\":{},\"Tab\":\"true\"},\"stage6\":{\"Question\":\"Map the Keyphrases with EASE categories\",\"QuestionComponent\":\"TextComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDatasettableviewComponent\",\"alias\":\"EASE MAPPING\"},\"input\":{\"dataset\":\"\",\"inp1\":\"stage5\"},\"output\":{},\"Tab\":\"true\"},\"stage7\":{\"Question\":\"Run Key Phrase Mapping\",\"QuestionComponent\":\"ExecuteComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDatasettableviewComponent\",\"alias\":\"EASE Mapping\"},\"input\":{\"inp1\":\"stage5\",\"type\":\"pipeline\",\"event\":\"Keyphrase\",\"eventinp\":\"{}\",\"outputDataset\":\"\",\"dataset\":\"\"},\"output\":{},\"Tab\":\"false\"},\"stage8\":{\"Question\":\"Dashboard\",\"QuestionComponent\":\"EmptyComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDashboardComponent\",\"alias\":\"Dashboard\"},\"input\":{\"dashboardname\":\"EASE Analytics\"},\"output\":{},\"Tab\":\"true\"}}}' WHERE wkname='EASE';
	</sql>			
</changeSet>
<changeSet author="Leap" id="2v1-cip-366336">
	<sql dbms="mssql" splitStatements="true" stripComments="true">  
		UPDATE mlworkflowspec SET wkspec='{"jsondata":{"stage1":{"Question":"Choose Ticket Dataset","QuestionComponent":"ChooseDatasetComponent","mandatory":"true","WorkareaComponent":{"Component":"WkDatasetsviewComponent","alias":"Dataset"},"input":{},"output":{},"Tab":"false"},"stage2":{"Question":"Clean Tickets","QuestionComponent":"ExecuteComponent","mandatory":"true","WorkareaComponent":{"Component":"WkLogsComponent","alias":"Logs"},"input":{"inp1":"","type":"pipeline","event":"CleanTickets","eventinp":"{}","outputDataset":""},"output":{},"Tab":"true"},"stage3":{"Question":"Cleaned  Tickets","QuestionComponent":"NextComponent","mandatory":"true","WorkareaComponent":{"Component":"WkDatasettableviewComponent","alias":"Cleaned Tickets"},"input":{"dataset":"ACMTCKTS76661","inp1":""},"output":{},"Tab":"true"},"stage4":{"Question":"Extract Phrases","QuestionComponent":"ExecuteComponent","mandatory":"true","WorkareaComponent":{"Component":"WkDatasettableviewComponent","alias":"Cleaned Tickets"},"input":{"inp1":"","type":"pipeline","event":"PhraseExtraction","eventinp":"{}","outputDataset":"","dataset":"ACMTCKTS76661"},"output":{},"Tab":"false"},"stage5":{"Question":"Choose EASE Keywords Dataset","QuestionComponent":"ChooseDatasetComponent","mandatory":"true","WorkareaComponent":{"Component":"WkDatasetsviewComponent","alias":"Dataset"},"input":{},"output":{},"Tab":"true"},"stage6":{"Question":"Map the Keyphrases with EASE categories","QuestionComponent":"TextComponent","mandatory":"true","WorkareaComponent":{"Component":"WkDatasettableviewComponent","alias":"EASE MAPPING"},"input":{"dataset":"","inp1":"stage5"},"output":{},"Tab":"true"},"stage7":{"Question":"Run Key Phrase Mapping","QuestionComponent":"ExecuteComponent","mandatory":"true","WorkareaComponent":{"Component":"WkDatasettableviewComponent","alias":"EASE Mapping"},"input":{"inp1":"stage5","type":"pipeline","event":"Keyphrase","eventinp":"{}","outputDataset":"","dataset":""},"output":{},"Tab":"false"},"stage8":{"Question":"Dashboard","QuestionComponent":"EmptyComponent","mandatory":"true","WorkareaComponent":{"Component":"WkDashboardComponent","alias":"Dashboard"},"input":{"dashboardname":"EASE Analytics"},"output":{},"Tab":"true"}}}' WHERE wkname='EASE';
	</sql>			
</changeSet>
<changeSet author="Leap" id="2v1-cip-366338">
	<sql dbms="mssql" splitStatements="true" stripComments="true">  
		UPDATE mlworkflowspec SET wkspec='{"jsondata":{"stage1":{"Question":"Choose Dataset","QuestionComponent":"ChooseDatasetComponent","mandatory":"true","WorkareaComponent":{"Component":"WkDatasetsviewComponent","alias":"Choose Dataset"},"input":{},"output":{},"Tab":"false"},"stage2":{"Question":"Run Clean Tickets Pipeline","QuestionComponent":"ExecuteComponent","mandatory":"true","WorkareaComponent":{"Component":"WkLogsComponent","alias":"Logs"},"input":{"inp1":"","type":"pipeline","event":"CleanTickets","eventinp":"{}","outputDataset":""},"output":{},"Tab":"true"},"stage3":{"Question":"Cleaned  Tickets","QuestionComponent":"NextComponent","mandatory":"true","WorkareaComponent":{"Component":"WkDatasettableviewComponent","alias":"Cleaned  Tickets"},"input":{"dataset":"ACMTCKTS76661","inp1":""},"output":{},"Tab":"true"},"stage4":{"Question":"Run Extract Words Pipeline","QuestionComponent":"ExecuteComponent","mandatory":"true","WorkareaComponent":{"Component":"WkDatasettableviewComponent","alias":"Cleaned  Tickets"},"input":{"inp1":"","type":"pipeline","event":"ExtractWords","eventinp":"{}","outputDataset":"","dataset":"ACMTCKTS76661"},"output":{},"Tab":"false"},"stage5":{"Question":"Choose stop words to remove from word corpus?","QuestionComponent":"EmptyComponent","mandatory":"true","WorkareaComponent":{"Component":"DataCorpusViewComponent","alias":"Word Corpus"},"input":{"dataset":"LEOINVRT55362","inp1":""},"output":{},"Tab":"true"},"stage6":{"Question":"Run Stop Words Remover Pipeline","QuestionComponent":"ExecuteComponent","mandatory":"true","WorkareaComponent":{"Component":"DataCorpusViewComponent","alias":"Word Corpus"},"input":{"inp1":"","type":"","event":"StopWords","eventinp":{"Stop  Words  Remover": { "stopWords": "stage5"} },"outputDataset":"","dataset":"LEOINVRT55362"},"output":{},"Tab":"false"},"stage7":{"Question":"Stop Words Removed from CleanedText","QuestionComponent":"NextComponent","mandatory":"true","WorkareaComponent":{"Component":"WkDatasettableviewComponent","alias":"CleanedText"},"input":{"dataset":"LEOINVRT55362","inp1":""},"output":{},"Tab":"true"},"stage8":{"Question":"Run Phrase Extraction Pipeline","QuestionComponent":"ExecuteComponent","mandatory":"true","WorkareaComponent":{"Component":"DataCorpusViewComponent","alias":"CleanedText"},"input":{"inp1":"","type":"pipeline","event":"PhraseExtraction","eventinp":"{}","outputDataset":"","dataset":"LEOINVRT55362"},"output":{},"Tab":"false"},"stage9":{"Question":"Map the Keyphrases with categories","QuestionComponent":"NextComponent","mandatory":"false","WorkareaComponent":{"Component":"WkDatasettableviewComponent","alias":"Mapping"},"input":{"dataset":"ACMESMPN85731","inp1":""},"output":{},"Tab":"true"},"stage10":{"Question":"Run Key phrase mapping Pipeline","QuestionComponent":"ExecuteComponent","mandatory":"true","WorkareaComponent":{"Component":"WkDatasettableviewComponent","alias":"Mapping"},"input":{"inp1":"","type":"pipeline","event":"Keyphrase","eventinp":"{}","outputDataset":"","dataset":"ACMESMPN85731"},"output":{},"Tab":"false"},"stage11":{"Question":"Run Ticket Clustering ","QuestionComponent":"ExecuteComponent","mandatory":"true","WorkareaComponent":{"Component":"WkDatasettableviewComponent","alias":"Ticket  Clustering"},"input":{"inp1":"","type":"chain","event":"TicketClustering","eventinp":"{}","outputDataset":"","dataset":"ACMESMPN85731"},"output":{},"Tab":"false"},"stage12":{"Question":"Ticket Clustering Summary","QuestionComponent":"EmptyComponent","mandatory":"true","WorkareaComponent":{"Component":"WkDashboardComponent","alias":"Summary"},"input":{"dashboardname":"Ticket Cluster"},"output":{},"Tab":"true"}}}' WHERE wkname='TicketClustering';
	</sql>			
</changeSet>
<changeSet author="Leap" id="2v1-cip-366339">
	<sql dbms="mysql,h2,postgresql" splitStatements="true" stripComments="true">
	UPDATE mldatasource SET connectiondetails= "{\"NoProxy\":\"false\",\"ConnectionType\":\"ApiRequest\",\"testDataset\":{\"name\":\"\",\"attributes\":{\"Endpoint\":\"\",\"RequestMethod\":\"GET\",\"Headers\":\"\",\"QueryParams\":\"\",\"Body\":\"\"}},\"AuthDetails\":{\"password\":\"enczw6NP1ZEtcZUZ+yM5j3VXtx3pQFuxRGn\",\"authParams\":{\"grant_type\":\"\",\"client_secret\":\"\",\"client_id\":\"\"},\"username\":\"ICSP_icap_user\"},\"AuthType\":\"BasicAuth\",\"Url\":\"https://infosysq3dev1.service-now.com\"}" WHERE name = "ACMSNWQB82627";
	UPDATE mlschemaregistry SET schemavalue="[{\"columntype\": \"string\",\"columnorder\": 1,\"recordcolumnname\": \"number\",\"recordcolumndisplayname\": \"Number\",\"isprimarykey\": true,\"isunique\": true,\"isrequired\": true},{\"columntype\": \"text\",\"columnorder\": 2,\"recordcolumnname\": \"shortdescription\",\"recordcolumndisplayname\": \"Short Description\",\"isprimarykey\": false,\"isunique\": false,\"isrequired\": true,\"isautoincrement\": false},{\"columntype\": \"string\",\"columnorder\": 3,\"recordcolumnname\": \"priority\",\"recordcolumndisplayname\": \"Priority\",\"isprimarykey\": false,\"isunique\": false,\"isrequired\": true,\"isautoincrement\": false},{\"columntype\": \"string\",\"columnorder\": 4,\"recordcolumnname\": \"type\",\"recordcolumndisplayname\": \"Type\",\"isprimarykey\": false,\"isunique\": false,\"isrequired\": true,\"isautoincrement\": false},{\"columntype\": \"timestamp\",\"columnorder\": 5,\"recordcolumnname\": \"createdDate\",\"recordcolumndisplayname\": \"Created Date\",\"isprimarykey\": false,\"isunique\": false,\"isrequired\": true,\"isautoincrement\": false},{\"columntype\": \"string\",\"columnorder\": 6,\"recordcolumnname\": \"approval\",\"recordcolumndisplayname\": \"Approval\",\"isprimarykey\": false,\"isunique\": false,\"isrequired\": false},{\"columntype\": \"string\",\"columnorder\": 7,\"recordcolumnname\": \"assignedDate\",\"recordcolumndisplayname\": \"Assigned Date\",\"isprimarykey\": false,\"isunique\": false,\"isrequired\": false},{\"columntype\": \"string\",\"columnorder\": 8,\"recordcolumnname\": \"assignedto\",\"recordcolumndisplayname\": \"Assigned To\",\"isprimarykey\": false,\"isunique\": false,\"isrequired\": false},{\"columntype\": \"string\",\"columnorder\": 9,\"recordcolumnname\": \"assignmentgroup\",\"recordcolumndisplayname\": \"Assignment Group\",\"isprimarykey\": false,\"isunique\": false,\"isrequired\": false},{\"columntype\": \"string\",\"columnorder\": 10,\"recordcolumnname\": \"business_service\",\"recordcolumndisplayname\": \"Business Service\",\"isprimarykey\": false,\"isunique\": false,\"isrequired\": false},{\"columntype\": \"string\",\"columnorder\": 11,\"recordcolumnname\": \"caller\",\"recordcolumndisplayname\": \"Caller\",\"isprimarykey\": false,\"isunique\": false,\"isrequired\": false},{\"columntype\": \"string\",\"columnorder\": 12,\"recordcolumnname\": \"category\",\"recordcolumndisplayname\": \"Category\",\"isprimarykey\": false,\"isunique\": false,\"isrequired\": false},{\"columntype\": \"string\",\"columnorder\": 13,\"recordcolumnname\": \"closecode\",\"recordcolumndisplayname\": \"Close Code\",\"isprimarykey\": false,\"isunique\": false,\"isrequired\": false},{\"columntype\": \"string\",\"columnorder\": 14,\"recordcolumnname\": \"closedby\",\"recordcolumndisplayname\": \"Closed By\",\"isprimarykey\": false,\"isunique\": false,\"isrequired\": false},{\"columntype\": \"timestamp\",\"columnorder\": 15,\"recordcolumnname\": \"closedDate\",\"recordcolumndisplayname\": \"Closed Date\",\"isprimarykey\": false,\"isunique\": false,\"isrequired\": false,\"isautoincrement\": false},{\"columntype\": \"text\",\"columnorder\": 16,\"recordcolumnname\": \"closenotes\",\"recordcolumndisplayname\": \"Close Notes\",\"isprimarykey\": false,\"isunique\": false,\"isrequired\": false},{\"columntype\": \"text\",\"columnorder\": 17,\"recordcolumnname\": \"comments\",\"recordcolumndisplayname\": \"Comments\",\"isprimarykey\": false,\"isunique\": false,\"isrequired\": false},{\"columntype\": \"string\",\"columnorder\": 18,\"recordcolumnname\": \"configurationItem\",\"recordcolumndisplayname\": \"Configuration Item\",\"isprimarykey\": false,\"isunique\": false,\"isrequired\": false},{\"columntype\": \"string\",\"columnorder\": 19,\"recordcolumnname\": \"createdby\",\"recordcolumndisplayname\": \"Created By\",\"isprimarykey\": false,\"isunique\": false,\"isrequired\": false},{\"columntype\": \"text\",\"columnorder\": 20,\"recordcolumnname\": \"description\",\"recordcolumndisplayname\": \"Description\",\"isprimarykey\": false,\"isunique\": false,\"isrequired\": false},{\"columntype\": \"string\",\"columnorder\": 21,\"recordcolumnname\": \"duedate\",\"recordcolumndisplayname\": \"Due Date\",\"isprimarykey\": false,\"isunique\": false,\"isrequired\": false},{\"columntype\": \"string\",\"columnorder\": 22,\"recordcolumnname\": \"impact\",\"recordcolumndisplayname\": \"Impact\",\"isprimarykey\": false,\"isunique\": false,\"isrequired\": false},{\"columntype\": \"string\",\"columnorder\": 23,\"recordcolumnname\": \"last_updated_by\",\"recordcolumndisplayname\": \"Last Updated By\",\"isprimarykey\": false,\"isunique\": false,\"isrequired\": false},{\"columntype\": \"timestamp\",\"columnorder\": 24,\"recordcolumnname\": \"lastUpdated\",\"recordcolumndisplayname\": \"Last Updated\",\"isprimarykey\": false,\"isunique\": false,\"isrequired\": false},{\"columntype\": \"string\",\"columnorder\": 25,\"recordcolumnname\": \"location\",\"recordcolumndisplayname\": \"Location\",\"isprimarykey\": false,\"isunique\": false,\"isrequired\": false},{\"columntype\": \"timestamp\",\"columnorder\": 26,\"recordcolumnname\": \"openedDate\",\"recordcolumndisplayname\": \"Opened Date\",\"isprimarykey\": false,\"isunique\": false,\"isrequired\": false},{\"columntype\": \"string\",\"columnorder\": 27,\"recordcolumnname\": \"price\",\"recordcolumndisplayname\": \"Price\",\"isprimarykey\": false,\"isunique\": false,\"isrequired\": false},{\"columntype\": \"timestamp\",\"columnorder\": 28,\"recordcolumnname\": \"reopenedDate\",\"recordcolumndisplayname\": \"Reopened Date\",\"isprimarykey\": false,\"isunique\": false,\"isrequired\": false},{\"columntype\": \"string\",\"columnorder\": 29,\"recordcolumnname\": \"request_state\",\"recordcolumndisplayname\": \"Request State\",\"isprimarykey\": false,\"isunique\": false,\"isrequired\": false},{\"columntype\": \"string\",\"columnorder\": 30,\"recordcolumnname\": \"requested_by\",\"recordcolumndisplayname\": \"Requested By\",\"isprimarykey\": false,\"isunique\": false,\"isrequired\": false},{\"columntype\": \"string\",\"columnorder\": 31,\"recordcolumnname\": \"requested_for\",\"recordcolumndisplayname\": \"Requested For\",\"isprimarykey\": false,\"isunique\": false,\"isrequired\": false},{\"columntype\": \"string\",\"columnorder\": 32,\"recordcolumnname\": \"resolvedby\",\"recordcolumndisplayname\": \"Resolved By\",\"isprimarykey\": false,\"isunique\": false,\"isrequired\": false},{\"columntype\": \"timestamp\",\"columnorder\": 33,\"recordcolumnname\": \"resolvedDate\",\"recordcolumndisplayname\": \"Resolved Date\",\"isprimarykey\": false,\"isunique\": false,\"isrequired\": false},{\"columntype\": \"string\",\"columnorder\": 34,\"recordcolumnname\": \"risk\",\"recordcolumndisplayname\": \"Risk\",\"isprimarykey\": false,\"isunique\": false,\"isrequired\": false},{\"columntype\": \"string\",\"columnorder\": 35,\"recordcolumnname\": \"severity\",\"recordcolumndisplayname\": \"Severity\",\"isprimarykey\": false,\"isunique\": false,\"isrequired\": false},{\"columntype\": \"string\",\"columnorder\": 36,\"recordcolumnname\": \"sladueDate\",\"recordcolumndisplayname\": \"SLA Due Date\",\"isprimarykey\": false,\"isunique\": false,\"isrequired\": false},{\"columntype\": \"string\",\"columnorder\": 37,\"recordcolumnname\": \"special_instructions\",\"recordcolumndisplayname\": \"Special Instructions\",\"isprimarykey\": false,\"isunique\": false,\"isrequired\": false},{\"columntype\": \"text\",\"columnorder\": 38,\"recordcolumnname\": \"resolution_Steps\",\"recordcolumndisplayname\": \"Resolution Steps\",\"isprimarykey\": false,\"isunique\": false,\"isrequired\": false},{\"columntype\": \"string\",\"columnorder\": 39,\"recordcolumnname\": \"state\",\"recordcolumndisplayname\": \"State\",\"isprimarykey\": false,\"isunique\": false,\"isrequired\": false},{\"columntype\": \"string\",\"columnorder\": 40,\"recordcolumnname\": \"sysId\",\"recordcolumndisplayname\": \"Sys Id\",\"isprimarykey\": false,\"isunique\": false,\"isrequired\": false},{\"columntype\": \"string\",\"columnorder\": 41,\"recordcolumnname\": \"taskType\",\"recordcolumndisplayname\": \"Task Type\",\"isprimarykey\": false,\"isunique\": false,\"isrequired\": false},{\"columntype\": \"string\",\"columnorder\": 42,\"recordcolumnname\": \"updatedby\",\"recordcolumndisplayname\": \"Updated By\",\"isprimarykey\": false,\"isunique\": false,\"isrequired\": false},{\"columntype\": \"timestamp\",\"columnorder\": 43,\"recordcolumnname\": \"updatedDate\",\"recordcolumndisplayname\": \"Updated Date\",\"isprimarykey\": false,\"isunique\": false,\"isrequired\": false},{\"columntype\": \"string\",\"columnorder\": 44,\"recordcolumnname\": \"sop\",\"recordcolumndisplayname\": \"SOP\",\"isprimarykey\": false,\"isunique\": false,\"isrequired\": false},{\"columntype\": \"string\",\"columnorder\": 45,\"recordcolumnname\": \"tags\",\"recordcolumndisplayname\": \"Tags\",\"isprimarykey\": false,\"isunique\": false,\"isrequired\": false},{\"columntype\": \"string\",\"columnorder\": 46,\"recordcolumnname\": \"source\",\"recordcolumndisplayname\": \"Source\",\"isprimarykey\": false,\"isunique\": false,\"isrequired\": false},{\"columntype\": \"string\",\"columnorder\": 47,\"recordcolumnname\": \"resolutionCategory\",\"recordcolumndisplayname\": \"Resolution Category\",\"isprimarykey\": false,\"isunique\": false,\"isrequired\": false},{\"columntype\": \"string\",\"columnorder\": 48,\"recordcolumnname\": \"workflow\",\"recordcolumndisplayname\": \"Workflow\",\"isprimarykey\": false,\"isunique\": false,\"isrequired\": false},{\"columntype\": \"string\",\"columnorder\": 48,\"recordcolumnname\": \"resolutionStepsClusterName\",\"recordcolumndisplayname\": \"resolutionStepsClusterName\",\"isprimarykey\": false,\"isunique\": false,\"isrequired\": false}]" where name="TicketsSchema"
	</sql>
	<sql dbms="mssql,h2" splitStatements="true" stripComments="true">
	UPDATE mldatasource SET connectiondetails= '{"NoProxy":"false","ConnectionType":"ApiRequest","testDataset":{"name":"","attributes":{"Endpoint":"","RequestMethod":"GET","Headers":"","QueryParams":"","Body":""}},"AuthDetails":{"password":"enczw6NP1ZEtcZUZ+yM5j3VXtx3pQFuxRGn","authParams":{"grant_type":"","client_secret":"","client_id":""},"username":"ICSP_icap_user"},"AuthType":"BasicAuth","Url":"https://infosysq3dev1.service-now.com"}' WHERE name = 'ACMSNWQB82627';
	UPDATE mlschemaregistry SET schemavalue='[{"columntype": "string","columnorder": 1,"recordcolumnname": "number","recordcolumndisplayname": "Number","isprimarykey": true,"isunique": true,"isrequired": true},{"columntype": "text","columnorder": 2,"recordcolumnname": "shortdescription","recordcolumndisplayname": "Short Description","isprimarykey": false,"isunique": false,"isrequired": true,"isautoincrement": false},{"columntype": "string","columnorder": 3,"recordcolumnname": "priority","recordcolumndisplayname": "Priority","isprimarykey": false,"isunique": false,"isrequired": true,"isautoincrement": false},{"columntype": "string","columnorder": 4,"recordcolumnname": "type","recordcolumndisplayname": "Type","isprimarykey": false,"isunique": false,"isrequired": true,"isautoincrement": false},{"columntype": "timestamp","columnorder": 5,"recordcolumnname": "createdDate","recordcolumndisplayname": "Created Date","isprimarykey": false,"isunique": false,"isrequired": true,"isautoincrement": false},{"columntype": "string","columnorder": 6,"recordcolumnname": "approval","recordcolumndisplayname": "Approval","isprimarykey": false,"isunique": false,"isrequired": false},{"columntype": "string","columnorder": 7,"recordcolumnname": "assignedDate","recordcolumndisplayname": "Assigned Date","isprimarykey": false,"isunique": false,"isrequired": false},{"columntype": "string","columnorder": 8,"recordcolumnname": "assignedto","recordcolumndisplayname": "Assigned To","isprimarykey": false,"isunique": false,"isrequired": false},{"columntype": "string","columnorder": 9,"recordcolumnname": "assignmentgroup","recordcolumndisplayname": "Assignment Group","isprimarykey": false,"isunique": false,"isrequired": false},{"columntype": "string","columnorder": 10,"recordcolumnname": "business_service","recordcolumndisplayname": "Business Service","isprimarykey": false,"isunique": false,"isrequired": false},{"columntype": "string","columnorder": 11,"recordcolumnname": "caller","recordcolumndisplayname": "Caller","isprimarykey": false,"isunique": false,"isrequired": false},{"columntype": "string","columnorder": 12,"recordcolumnname": "category","recordcolumndisplayname": "Category","isprimarykey": false,"isunique": false,"isrequired": false},{"columntype": "string","columnorder": 13,"recordcolumnname": "closecode","recordcolumndisplayname": "Close Code","isprimarykey": false,"isunique": false,"isrequired": false},{"columntype": "string","columnorder": 14,"recordcolumnname": "closedby","recordcolumndisplayname": "Closed By","isprimarykey": false,"isunique": false,"isrequired": false},{"columntype": "timestamp","columnorder": 15,"recordcolumnname": "closedDate","recordcolumndisplayname": "Closed Date","isprimarykey": false,"isunique": false,"isrequired": false,"isautoincrement": false},{"columntype": "text","columnorder": 16,"recordcolumnname": "closenotes","recordcolumndisplayname": "Close Notes","isprimarykey": false,"isunique": false,"isrequired": false},{"columntype": "text","columnorder": 17,"recordcolumnname": "comments","recordcolumndisplayname": "Comments","isprimarykey": false,"isunique": false,"isrequired": false},{"columntype": "string","columnorder": 18,"recordcolumnname": "configurationItem","recordcolumndisplayname": "Configuration Item","isprimarykey": false,"isunique": false,"isrequired": false},{"columntype": "string","columnorder": 19,"recordcolumnname": "createdby","recordcolumndisplayname": "Created By","isprimarykey": false,"isunique": false,"isrequired": false},{"columntype": "text","columnorder": 20,"recordcolumnname": "description","recordcolumndisplayname": "Description","isprimarykey": false,"isunique": false,"isrequired": false},{"columntype": "string","columnorder": 21,"recordcolumnname": "duedate","recordcolumndisplayname": "Due Date","isprimarykey": false,"isunique": false,"isrequired": false},{"columntype": "string","columnorder": 22,"recordcolumnname": "impact","recordcolumndisplayname": "Impact","isprimarykey": false,"isunique": false,"isrequired": false},{"columntype": "string","columnorder": 23,"recordcolumnname": "last_updated_by","recordcolumndisplayname": "Last Updated By","isprimarykey": false,"isunique": false,"isrequired": false},{"columntype": "timestamp","columnorder": 24,"recordcolumnname": "lastUpdated","recordcolumndisplayname": "Last Updated","isprimarykey": false,"isunique": false,"isrequired": false},{"columntype": "string","columnorder": 25,"recordcolumnname": "location","recordcolumndisplayname": "Location","isprimarykey": false,"isunique": false,"isrequired": false},{"columntype": "timestamp","columnorder": 26,"recordcolumnname": "openedDate","recordcolumndisplayname": "Opened Date","isprimarykey": false,"isunique": false,"isrequired": false},{"columntype": "string","columnorder": 27,"recordcolumnname": "price","recordcolumndisplayname": "Price","isprimarykey": false,"isunique": false,"isrequired": false},{"columntype": "timestamp","columnorder": 28,"recordcolumnname": "reopenedDate","recordcolumndisplayname": "Reopened Date","isprimarykey": false,"isunique": false,"isrequired": false},{"columntype": "string","columnorder": 29,"recordcolumnname": "request_state","recordcolumndisplayname": "Request State","isprimarykey": false,"isunique": false,"isrequired": false},{"columntype": "string","columnorder": 30,"recordcolumnname": "requested_by","recordcolumndisplayname": "Requested By","isprimarykey": false,"isunique": false,"isrequired": false},{"columntype": "string","columnorder": 31,"recordcolumnname": "requested_for","recordcolumndisplayname": "Requested For","isprimarykey": false,"isunique": false,"isrequired": false},{"columntype": "string","columnorder": 32,"recordcolumnname": "resolvedby","recordcolumndisplayname": "Resolved By","isprimarykey": false,"isunique": false,"isrequired": false},{"columntype": "timestamp","columnorder": 33,"recordcolumnname": "resolvedDate","recordcolumndisplayname": "Resolved Date","isprimarykey": false,"isunique": false,"isrequired": false},{"columntype": "string","columnorder": 34,"recordcolumnname": "risk","recordcolumndisplayname": "Risk","isprimarykey": false,"isunique": false,"isrequired": false},{"columntype": "string","columnorder": 35,"recordcolumnname": "severity","recordcolumndisplayname": "Severity","isprimarykey": false,"isunique": false,"isrequired": false},{"columntype": "string","columnorder": 36,"recordcolumnname": "sladueDate","recordcolumndisplayname": "SLA Due Date","isprimarykey": false,"isunique": false,"isrequired": false},{"columntype": "string","columnorder": 37,"recordcolumnname": "special_instructions","recordcolumndisplayname": "Special Instructions","isprimarykey": false,"isunique": false,"isrequired": false},{"columntype": "text","columnorder": 38,"recordcolumnname": "resolution_Steps","recordcolumndisplayname": "Resolution Steps","isprimarykey": false,"isunique": false,"isrequired": false},{"columntype": "string","columnorder": 39,"recordcolumnname": "state","recordcolumndisplayname": "State","isprimarykey": false,"isunique": false,"isrequired": false},{"columntype": "string","columnorder": 40,"recordcolumnname": "sysId","recordcolumndisplayname": "Sys Id","isprimarykey": false,"isunique": false,"isrequired": false},{"columntype": "string","columnorder": 41,"recordcolumnname": "taskType","recordcolumndisplayname": "Task Type","isprimarykey": false,"isunique": false,"isrequired": false},{"columntype": "string","columnorder": 42,"recordcolumnname": "updatedby","recordcolumndisplayname": "Updated By","isprimarykey": false,"isunique": false,"isrequired": false},{"columntype": "timestamp","columnorder": 43,"recordcolumnname": "updatedDate","recordcolumndisplayname": "Updated Date","isprimarykey": false,"isunique": false,"isrequired": false},{"columntype": "string","columnorder": 44,"recordcolumnname": "sop","recordcolumndisplayname": "SOP","isprimarykey": false,"isunique": false,"isrequired": false},{"columntype": "string","columnorder": 45,"recordcolumnname": "tags","recordcolumndisplayname": "Tags","isprimarykey": false,"isunique": false,"isrequired": false},{"columntype": "string","columnorder": 46,"recordcolumnname": "source","recordcolumndisplayname": "Source","isprimarykey": false,"isunique": false,"isrequired": false},{"columntype": "string","columnorder": 47,"recordcolumnname": "resolutionCategory","recordcolumndisplayname": "Resolution Category","isprimarykey": false,"isunique": false,"isrequired": false},{"columntype": "string","columnorder": 48,"recordcolumnname": "workflow","recordcolumndisplayname": "Workflow","isprimarykey": false,"isunique": false,"isrequired": false},{"columntype": "string","columnorder": 48,"recordcolumnname": "resolutionStepsClusterName","recordcolumndisplayname": "resolutionStepsClusterName","isprimarykey": false,"isunique": false,"isrequired": false}]' where name='TicketsSchema'
	</sql>
	</changeSet>
<changeSet author="Leap" id="2v1-cip-366341">
	<sql dbms="mysql,h2,postgresql" splitStatements="true" stripComments="true">  
		UPDATE mlworkflowspec SET wkspec='{\"jsondata\":{\"stage1\":{\"Question\":\"Choose Process Mining Dataset\",\"QuestionComponent\":\"ChooseDatasetComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDatasetsviewComponent\",\"alias\":\"Process Dataset\"},\"input\":{},\"output\":{},\"Tab\":\"false\"},\"stage2\":{\"Question\":\"Choose Process Id Column\",\"QuestionComponent\":\"SingleselectComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDatasettableviewComponent\",\"alias\":\"DatasetView\"},\"input\":{\"inp1\":\"stage1\",\"dataset\":\"LEOORDRP80376\"},\"output\":{},\"Tab\":\"true\"},\"stage3\":{\"Question\":\"Choose Process State Column\",\"QuestionComponent\":\"SingleselectComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDatasettableviewComponent\",\"alias\":\"DatasetView\"},\"input\":{\"inp1\":\"stage1\",\"dataset\":\"\"},\"output\":{},\"Tab\":\"false\"},\"stage4\":{\"Question\":\"Choose Process TimeStamp Column\",\"QuestionComponent\":\"SingleselectComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDatasettableviewComponent\",\"alias\":\"DatasetView\"},\"input\":{\"inp1\":\"stage1\",\"dataset\":\"\"},\"output\":{},\"Tab\":\"false\"},\"stage5\":{\"Question\":\"Choose Additional Columns\",\"QuestionComponent\":\"MultiselectComponent\",\"mandatory\":\"false\",\"WorkareaComponent\":{\"Component\":\"WkDatasettableviewComponent\",\"alias\":\"DatasetView\"},\"input\":{\"dataset\":\"\",\"inp1\":\"\"},\"output\":{},\"Tab\":\"false\"},\"stage6\":{\"Question\":\"Enter Process Type\",\"QuestionComponent\":\"InputComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDatasettableviewComponent\",\"alias\":\"DatasetView\"},\"input\":{\"dataset\":\"\",\"inp1\":\"stage1\"},\"output\":{},\"Tab\":\"false\"},\"stage7\":{\"Question\":\"Enter Edge Table name\",\"QuestionComponent\":\"InputComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDatasettableviewComponent\",\"alias\":\"Edge Table Name\"},\"input\":{\"dataset\":\"\",\"inp1\":\"\"},\"output\":{},\"Tab\":\"false\"},\"stage8\":{\"Question\":\"Enter Graph Table anme\",\"QuestionComponent\":\"InputComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDatasettableviewComponent\",\"alias\":\"Graph  Table\"},\"input\":{\"dataset\":\"\",\"inp1\":\"stage1\"},\"output\":{},\"Tab\":\"false\"},\"stage9\":{\"Question\":\"What is your dashboard name?\",\"QuestionComponent\":\"InputComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDatasettableviewComponent\",\"alias\":\"Dashboard Name\"},\"input\":{\"dataset\":\"\",\"inp1\":\"stage1\"},\"output\":{},\"Tab\":\"false\"},\"stage10\":{\"Question\":\"Run Process Mining Pipeline\",\"QuestionComponent\":\"ExecuteComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkLogsComponent\",\"alias\":\"Process Mining Pipeline\"},\"input\":{\"inp1\":\"\",\"type\":\"pipeline\",\"event\":\"ProcessMining\",\"eventinp\":\"{\\\"mandatoryParams\\\": {\\\"id\\\":\\\"stage2\\\",\\\"node\\\":\\\"stage3\\\",\\\"actiontimestamp\\\":\\\"stage4\\\"},\\\"additionalMapping\\\":\\\"stage5\\\",\\\"type\\\":\\\"stage6\\\",\\\"edgetablename\\\" : \\\"stage7\\\" , \\\"graphtablename\\\" : \\\"stage8\\\", \\\"dashboardname\\\" : \\\"stage9\\\"}\",\"outputDataset\":\"\"},\"output\":{},\"Tab\":\"true\"},\"stage11\":{\"Question\":\"Process Mining Summary\",\"QuestionComponent\":\"EmptyComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDashboardComponent\",\"alias\":\"Summary\"},\"input\":{\"dashboardname\":\"\"},\"output\":{},\"Tab\":\"true\"}}}' WHERE wkname='ProcessMining';
	</sql>			
</changeSet>
<changeSet author="Leap" id="2v1-cip-366342">
	<sql dbms="mssql" splitStatements="true" stripComments="true">
		UPDATE mlworkflowspec SET wkspec='{"jsondata":{"stage1":{"Question":"Choose Process Mining Dataset","QuestionComponent":"ChooseDatasetComponent","mandatory":"true","WorkareaComponent":{"Component":"WkDatasetsviewComponent","alias":"Process Dataset"},"input":{},"output":{},"Tab":"false"},"stage2":{"Question":"Choose Process Id Column","QuestionComponent":"SingleselectComponent","mandatory":"true","WorkareaComponent":{"Component":"WkDatasettableviewComponent","alias":"DatasetView"},"input":{"inp1":"stage1","dataset":"LEOORDRP80376"},"output":{},"Tab":"true"},"stage3":{"Question":"Choose Process State Column","QuestionComponent":"SingleselectComponent","mandatory":"true","WorkareaComponent":{"Component":"WkDatasettableviewComponent","alias":"DatasetView"},"input":{"inp1":"stage1","dataset":""},"output":{},"Tab":"false"},"stage4":{"Question":"Choose Process TimeStamp Column","QuestionComponent":"SingleselectComponent","mandatory":"true","WorkareaComponent":{"Component":"WkDatasettableviewComponent","alias":"DatasetView"},"input":{"inp1":"stage1","dataset":""},"output":{},"Tab":"false"},"stage5":{"Question":"Choose Additional Columns","QuestionComponent":"MultiselectComponent","mandatory":"false","WorkareaComponent":{"Component":"WkDatasettableviewComponent","alias":"DatasetView"},"input":{"dataset":"","inp1":""},"output":{},"Tab":"false"},"stage6":{"Question":"Enter Process Type","QuestionComponent":"InputComponent","mandatory":"true","WorkareaComponent":{"Component":"WkDatasettableviewComponent","alias":"DatasetView"},"input":{"dataset":"","inp1":"stage1"},"output":{},"Tab":"false"},"stage7":{"Question":"Enter Edge Table name","QuestionComponent":"InputComponent","mandatory":"true","WorkareaComponent":{"Component":"WkDatasettableviewComponent","alias":"Edge Table Name"},"input":{"dataset":"","inp1":""},"output":{},"Tab":"false"},"stage8":{"Question":"Enter Graph Table anme","QuestionComponent":"InputComponent","mandatory":"true","WorkareaComponent":{"Component":"WkDatasettableviewComponent","alias":"Graph  Table"},"input":{"dataset":"","inp1":"stage1"},"output":{},"Tab":"false"},"stage9":{"Question":"What is your dashboard name?","QuestionComponent":"InputComponent","mandatory":"true","WorkareaComponent":{"Component":"WkDatasettableviewComponent","alias":"Dashboard Name"},"input":{"dataset":"","inp1":"stage1"},"output":{},"Tab":"false"},"stage10":{"Question":"Run Process Mining Pipeline","QuestionComponent":"ExecuteComponent","mandatory":"true","WorkareaComponent":{"Component":"WkLogsComponent","alias":"Process Mining Pipeline"},"input":{"inp1":"","type":"pipeline","event":"ProcessMining","eventinp":"{\"mandatoryParams\": {\"id\":\"stage2\",\"node\":\"stage3\",\"actiontimestamp\":\"stage4\"},\"additionalMapping\":\"stage5\",\"type\":\"stage6\",\"edgetablename\" : \"stage7\" , \"graphtablename\" : \"stage8\" , \"dashboardname\" : \"stage9\"}","outputDataset":""},"output":{},"Tab":"true"},"stage11":{"Question":"Process Mining Summary","QuestionComponent":"EmptyComponent","mandatory":"true","WorkareaComponent":{"Component":"WkDashboardComponent","alias":"Summary"},"input":{"dashboardname":""},"output":{},"Tab":"true"}}}' WHERE wkname='ProcessMining';
	</sql>			
</changeSet>
<changeSet dbms="mssql" author="Leap (generated)" id="2v1-cip-366343">
        <loadData commentLineStartsWith="#" encoding="UTF-8" file="db/changelog/aip/data/2v1/cip/mlpipelinenativescriptentity-mssql.csv" quotchar="&quot;" separator="," tableName="mlpipelinenativescriptentity">
            <column header="id" name="id" type="NUMERIC"/>
            <column header="cname" name="cname" type="STRING"/>
            <column header="filename" name="filename" type="STRING"/>
            <column header="filescript" name="filescript" type="BLOB"/>
            <column header="organization" name="organization" type="STRING"/>
        </loadData>
    </changeSet>
<changeSet author="Leap" id="2v1-cip-366344">
		<sql dbms="mssql" splitStatements="true" stripComments="true">
		UPDATE mldataset SET attributes='{"filter":"","mode":"query","Query":"SELECT EASE , ROUND((CAST(COUNT(*) AS FLOAT )/CAST((SELECT COUNT(*) FROM @projectname_tickets ) AS FLOAT))*100,2) AS COUNT FROM @projectname_phrase_extraction te JOIN @projectname_EASEMapping map ON CAST(te.mapped_phrase AS varchar(255)) =map.Key_Word GROUP BY ease","Cacheable":false,"isStreaming":"false","defaultValues":"","writeMode":"append","params":"{}","tableName":"","uniqueIdentifier":""}' WHERE NAME='DistributionByEASE' AND ORGANIZATION='leo1311';
		UPDATE mldataset SET attributes='{"filter":"","mode":"query","Query":"SELECT CAST(mapped_phrase AS varchar(255)) AS KEYWORD, COUNT(*) as COUNT, ROUND((CAST(COUNT(*) AS FLOAT )/CAST((SELECT COUNT(*) FROM @projectname_tickets ) AS FLOAT))*100,2) AS [PERCENT] FROM @projectname_phrase_extraction te JOIN @projectname_EASEMapping map ON CAST(te.mapped_phrase AS varchar(255)) =map.Key_Word WHERE ease = {ease} GROUP BY CAST(mapped_phrase AS varchar(255)) ORDER BY COUNT(*) DESC","Cacheable":false,"isStreaming":"false","defaultValues":"","writeMode":"append","params":"{''ease'':''ease''}","tableName":"","uniqueIdentifier":""}' WHERE NAME='ease_distributionByKeyword' AND ORGANIZATION='leo1311';
		UPDATE mldataset SET attributes='{"filter":"","mode":"query","Query":"SELECT CAST(Number AS varchar(255))AS Number, extracted_phrase as Pattern , mapped_phrase as Keyword, Category , EASE , CONCAT(ROUND( CAST(CAST(mapped_phrase_confidennce AS varchar(255)) AS float)*100 ,2),''%'')AS ConfidenceScore FROM @projectname_phrase_extraction te JOIN @projectname_EASEMapping map ON CAST(te.mapped_phrase AS varchar(255)) =map.Key_Word WHERE ease = {ease} ORDER BY CAST(mapped_phrase_confidennce AS varchar(255)) DESC ","Cacheable":false,"isStreaming":"false","defaultValues":"","writeMode":"append","params":"{''ease'':''ease''}","tableName":"","uniqueIdentifier":""}' WHERE NAME='ease_tickets' AND ORGANIZATION='leo1311';
		UPDATE mldataset SET attributes='{"filter":"","mode":"query","Query":"SELECT SUM(COUNT) AS COUNT, SUM([percent]) AS [PERCENT] FROM (SELECT EASE,COUNT(*) AS COUNT, ROUND((CAST(COUNT(*) AS FLOAT )/CAST((SELECT COUNT(*) FROM @projectname_tickets ) AS FLOAT))*100,2) AS [PERCENT] FROM @projectname_phrase_extraction te JOIN @projectname_EASEMapping map ON CAST(te.mapped_phrase AS varchar(255)) =map.Key_Word WHERE ease = {ease} AND ease!='' '' AND ease IS NOT NULL GROUP BY ease) as ta","Cacheable":false,"isStreaming":"false","defaultValues":"","writeMode":"append","params":"{''ease'':''ease''}","tableName":"","uniqueIdentifier":""}' WHERE NAME='ease_TotalTickets' AND ORGANIZATION='leo1311';
		UPDATE mldataset SET attributes='{"filter":"","mode":"query","Query":"SELECT REPLACE(CAST(mapped_phrase AS varchar(255)),''   '', '' _ '') as PHRASE FROM @projectname_phrase_extraction te JOIN @projectname_EASEMapping map ON CAST(te.mapped_phrase AS varchar(255)) =map.Key_Word WHERE ease = {ease}","Cacheable":false,"isStreaming":"false","defaultValues":"","writeMode":"append","params":"{''ease'':''ease''}","tableName":"","uniqueIdentifier":""}' WHERE NAME='ease_wordcloud' AND ORGANIZATION='leo1311';
		UPDATE mldataset SET attributes='{"filter":"","mode":"query","Query":"select * from @projectname_EASEMapping","Cacheable":false,"isStreaming":"false","Headers":"","defaultValues":"","QueryParams":"","writeMode":"append","params":"{}","tableName":"@projectname_EASEMapping","uniqueIdentifier":""}' WHERE NAME ='ACMESMPN85731';
		</sql>	
	 </changeSet>
<changeSet author="Leap (generated)" id="2v1-cip-366349">
        <loadData commentLineStartsWith="#" encoding="UTF-8" file="db/changelog/aip/data/2v1/cip/mleventjobmapping.csv" quotchar="&quot;" separator="," tableName="mleventjobmapping">
            <column header="body" name="body" type="STRING"/>
            <column header="description" name="description" type="STRING"/>
            <column header="eventname" name="eventname" type="STRING"/>
            <column header="jobdetails" name="jobdetails" type="STRING"/>
            <column header="organization" name="organization" type="STRING"/>
        </loadData>
</changeSet>

<changeSet author="Leap" id="2v1-cip-366351">
		<sql dbms="mssql,h2" splitStatements="true" stripComments="true">  
			UPDATE mlpipeline SET json_content='{"elements":[{"attributes":{"filetype":"Python3","files":["ACMKYPHR40814_leo1311.py"],"arguments":[{"name":"LEAPDS","value":"leo1311","type":"Datasource","index":"1"},{"name":"TableName","value":"@projectname_phrase_extraction","type":"Text","index":"2","alias":"@projectname_phrase_extraction"},{"name":"EASEMapping","value":"EASEMapping","type":"Text","alias":"EASEMapping","index":"3"}],"dataset":[]}}]}' WHERE NAME='ACMKYPHR40814' AND ORGANIZATION='leo1311';
		</sql>			
</changeSet>
<changeSet author="Leap" id="2v1-cip-366352">
	<sql dbms="mysql,h2,postgresql" splitStatements="true" stripComments="true">  
		UPDATE mlworkflowspec SET wkspec='{\"jsondata\":{\"stage1\":{\"Question\":\"Choose Ticket Dataset\",\"QuestionComponent\":\"ChooseDatasetComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDatasetsviewComponent\",\"alias\":\"Datasets\"},\"input\":{},\"output\":{},\"Tab\":\"false\"},\"stage2\":{\"Question\":\"Choose Short Description Column\",\"QuestionComponent\":\"SingleselectComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDatasettableviewComponent\",\"alias\":\"Tickets\"},\"input\":{\"dataset\":\"\",\"inp1\":\"stage1\"},\"output\":{},\"Tab\":\"true\"},\"stage3\":{\"Question\":\"Choose Ticket Priority Column\",\"QuestionComponent\":\"SingleselectComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDatasettableviewComponent\",\"alias\":\"Tickets\"},\"input\":{\"dataset\":\"\",\"inp1\":\"stage1\"},\"output\":{},\"Tab\":\"false\"},\"stage4\":{\"Question\":\"Choose Ticket Status Column\",\"QuestionComponent\":\"SingleselectComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDatasettableviewComponent\",\"alias\":\"Tickets\"},\"input\":{\"inp1\":\"stage1\"},\"output\":{},\"Tab\":\"false\"},\"stage5\":{\"Question\":\"Choose Keywords Dataset\",\"QuestionComponent\":\"ChooseDatasetComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDatasetsviewComponent\",\"alias\":\"Datasets\"},\"input\":{},\"output\":{},\"Tab\":\"false\"},\"stage6\":{\"Question\":\"Keywords\",\"QuestionComponent\":\"NextComponent\",\"mandatory\":\"false\",\"WorkareaComponent\":{\"Component\":\"WkDatasettableviewComponent\",\"alias\":\"Keywords\"},\"input\":{\"dataset\":\"\",\"inp1\":\"stage5\"},\"output\":{},\"Tab\":\"true\"},\"stage7\":{\"Question\":\"Technology Classification\",\"QuestionComponent\":\"ExecuteComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkLogsComponent\",\"alias\":\"Logs\"},\"input\":{\"inp1\":\"\",\"type\":\"pipeline\",\"event\":\"TechClassify\",\"eventinp\":\"{\\"Dataset Extractor\\": {\\"dataset\\":\\"stage1\\"},\\"Keyword\\":{\\"dataset\\":\\"stage5\\"}}\",\"outputDataset\":\"\"},\"output\":{},\"Tab\":\"true\"},\"stage8\":{\"Question\":\"Classified  Tickets\",\"QuestionComponent\":\"NextComponent\",\"mandatory\":\"false\",\"WorkareaComponent\":{\"Component\":\"WkDatasettableviewComponent\",\"alias\":\"Classified Tickets\"},\"input\":{\"dataset\":\"LEOCLSFD44591\",\"inp1\":\"\"},\"output\":{},\"Tab\":\"true\"},\"stage9\":{\"Question\":\"Select Roster Dataset\",\"QuestionComponent\":\"ChooseDatasetComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDatasetsviewComponent\",\"alias\":\"Datasets\"},\"input\":{},\"output\":{},\"Tab\":\"true\"},\"stage10\":{\"Question\":\"Roster Data\",\"QuestionComponent\":\"NextComponent\",\"mandatory\":\"false\",\"WorkareaComponent\":{\"Component\":\"WkDatasettableviewComponent\",\"alias\":\"Roster Data\"},\"input\":{\"dataset\":\"LEORSTRD13362\",\"inp1\":\"\"},\"output\":{},\"Tab\":\"true\"},\"stage11\":{\"Question\":\"Assign Tickets\",\"QuestionComponent\":\"ExecuteComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDatasettableviewComponent\",\"alias\":\"Roster Data\"},\"input\":{\"inp1\":\"\",\"type\":\"pipeline\",\"event\":\"NextShiftAssign\",\"eventinp\":\"{}\",\"outputDataset\":\"\",\"dataset\":\"LEORSTRD52374\"},\"output\":{},\"Tab\":\"false\"},\"stage12\":{\"Question\":\"Assigned Tickets\",\"QuestionComponent\":\"EmptyComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDatasettableviewComponent\",\"alias\":\"Assigned Tickets\"},\"input\":{\"dataset\":\"LEOASGND51842\",\"inp1\":\"\"},\"output\":{},\"Tab\":\"true\"}}}' WHERE wkname='ShiftRoster';
	</sql>			
</changeSet>
<changeSet author="Leap" id="2v1-cip-366358">
	<sql dbms="mysql,h2,postgresql" splitStatements="true" stripComments="true">  
      UPDATE mlchains SET json_content='{\"runNow\":false,\"element\":{\"elements\":[{\"name\":\"Cluster_Prediction\",\"runtime\":\"DragAndDrop\",\"alias\":\"Cluster_Prediction\",\"index\":\"1\"},{\"name\":\"ACMATSGN51350\",\"runtime\":\"DragAndDrop\",\"alias\":\"Auto Assignment\",\"index\":\"6\"},{\"name\":\"SOPClassification\",\"runtime\":\"DragAndDrop\",\"alias\":\"SOPClassification\",\"index\":\"3\"},{\"name\":\"Extract_NER\",\"runtime\":\"DragAndDrop\",\"alias\":\"Extract_NER\",\"index\":\"4\"},{\"name\":\"ACMSLCLC50990\",\"runtime\":\"DragAndDrop\",\"alias\":\"SLA Calculation\",\"index\":\"5\"}]}}' WHERE job_name='DataEnrichment';
	</sql>			
</changeSet>
<changeSet author="Leap" id="2v1-cip-366356">
	<sql dbms="mysql,h2,postgresql" splitStatements="true" stripComments="true">  
		UPDATE mldataset SET attributes='{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT * from @projectname_tickets\",\"Cacheable\":\"false\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"@projectname_tickets\",\"uniqueIdentifier\":\"number\"}' WHERE name='Tickets' AND organization='leo1311';
       </sql>			
</changeSet>
<changeSet author="Leap" id="2v1-cip-366357">
		<sql dbms="mysql,h2,postgresql" splitStatements="true" stripComments="true">  
			UPDATE mlpipeline SET json_content='{\"elements\":[{\"id\":\"AJXpS\",\"alias\":\"Dataset  Extractor\",\"name\":\"Dataset  Extractor\",\"classname\":\"DatasetExtractorConfig\",\"category\":\"ExtractorConfig\",\"attributes\":{\"dataset\":{\"alias\":\"sla configuration\",\"name\":\"\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 07:03:18\",\"alias\":\"leo1311\",\"id\":15,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"@datasourcepass\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"@datasourceuser\\\",\\\"url\\\":\\\"@datasourceurl/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\",\"extras\":null},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from @projectname_sla_configuration\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},\"position_x\":\"140\",\"position_y\":\"220\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"XyhZO\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"isValidation\":\"checkbox\",\"samplingRatio\":\"text\",\"applySchema\":\"checkbox\"},\"context\":[]},{\"id\":\"LOhNn\",\"alias\":\"Dataset  Extractor\",\"name\":\"Dataset  Extractor\",\"classname\":\"DatasetExtractorConfig\",\"category\":\"ExtractorConfig\",\"attributes\":{\"dataset\":{\"alias\":\"Tickets\",\"name\":\"\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 07:03:18\",\"alias\":\"leo1311\",\"id\":15,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"@datasourcepass\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"@datasourceuser\\\",\\\"url\\\":\\\"@datasourceurl/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\",\"extras\":null},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT number,priority ,createdDate FROM @projectname_tickets WHERE createdDate IS NOT NULL AND\\n number NOT IN (SELECT NUMBER FROM @projectname_tickets_enriched WHERE resolution_SLA IS NOT NULL)\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"backingDataset\":null,\"organization\":\"leo1311\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},\"position_x\":\"120\",\"position_y\":\"50\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"XyhZO\",\"elementPosition\":\"TopCenter\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"isValidation\":\"checkbox\",\"samplingRatio\":\"text\",\"applySchema\":\"checkbox\"},\"context\":[]},{\"id\":\"ePRxe\",\"alias\":\"Python  Script  Transformer\",\"name\":\"Python  Script  Transformer\",\"classname\":\"PythonScriptTransformerConfig\",\"category\":\"TransformerConfig\",\"attributes\":{\"script\":[\"import logging\\r\",\"from datetime import datetime\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        \\r\",\"        dataset = dataset.withColumn(\'response_SLA\' ,(unix_timestamp(\'createdDate\') + col(\'responseSLA\')).cast(\'timestamp\'))\\r\",\"        dataset = dataset.withColumn(\'resolution_SLA\',(unix_timestamp(\'createdDate\') + col(\'resolutionSLA\')).cast(\'timestamp\'))\\r\",\"    \\r\",\"    \\r\",\"        dataset = dataset.withColumn(\'last_updated\', lit(datetime.now()))\\r\",\"        dataset = dataset.withColumn(\'response_SLA_confidence\', lit(100))\\r\",\"        dataset = dataset.withColumn(\'resolution_SLA_confidence\', lit(100))\\r\",\"\\r\",\"        dataset = dataset.select(\'number\',\'response_SLA\',\'resolution_SLA\',\'response_SLA_confidence\',\'resolution_SLA_confidence\',\'last_updated\' )\\r\",\"        dataset.show()\\r\",\"        return dataset\\r\"]},\"position_x\":\"629\",\"position_y\":\"94\",\"connectors\":[{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"LdAsF\",\"elementPosition\":\"LeftMiddle\"},{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"XyhZO\",\"elementPosition\":\"RightMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"script\":\"textarea\"},\"context\":[{\"params\":\"\",\"script\":[\"import logging as logger\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset1, dataset2):\\r\",\"        dataset = dataset1.join(dataset2, \'priority\')\\r\",\"        dataset = dataset.withColumn(\'responseSLA\', (col(\'responseSLA\') * 3600.0))\\r\",\"        dataset = dataset.withColumn(\'resolutionSLA\', (col(\'resolutionSLA\') * 3600.0))\\r\",\"        dataset = dataset.select(\'id\',\'priority\',\'number\',\'responseSLA\',\'resolutionSLA\',\'createdDate\')\\r\",\"        dataset.show()\\r\",\"        return dataset\\r\",\"\\r\"]},{\"dataset\":{\"alias\":\"sla configuration\",\"name\":\"\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 07:03:18\",\"alias\":\"leo1311\",\"id\":15,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"@datasourcepass\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"@datasourceuser\\\",\\\"url\\\":\\\"@datasourceurl/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\",\"extras\":null},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from @projectname_sla_configuration\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},{\"dataset\":{\"alias\":\"Tickets\",\"name\":\"\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 07:03:18\",\"alias\":\"leo1311\",\"id\":15,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"@datasourcepass\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"@datasourceuser\\\",\\\"url\\\":\\\"@datasourceurl/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\",\"extras\":null},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT number,priority ,createdDate FROM @projectname_tickets WHERE createdDate IS NOT NULL AND\\n number NOT IN (SELECT NUMBER FROM @projectname_tickets_enriched WHERE resolution_SLA IS NOT NULL)\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"backingDataset\":null,\"organization\":\"leo1311\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"LdAsF\",\"alias\":\"Dataset  Loader\",\"name\":\"Dataset  Loader\",\"classname\":\"DatasetLoaderConfig\",\"category\":\"LoaderConfig\",\"attributes\":{\"dataset\":{\"alias\":\"SLA Tickets\",\"name\":\"\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 07:03:18\",\"alias\":\"leo1311\",\"id\":15,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"@datasourcepass\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"@datasourceuser\\\",\\\"url\\\":\\\"@datasourceurl/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\",\"extras\":null},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select number, response_SLA, resolution_SLA, response_SLA_confidence, resolution_SLA_confidence, last_updated from @projectname_tickets_enriched\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"update\",\"params\":\"{}\",\"tableName\":\"@projectname_tickets_enriched\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"groups\":\"\",\"backingDataset\":\"\"},\"applySchema\":false},\"position_x\":\"836\",\"position_y\":\"156\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"in\",\"position\":\"LeftMiddle\",\"elementId\":\"ePRxe\",\"elementPosition\":\"RightMiddle\"}],\"inputEndpoints\":[\"in\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"dataset\":\"dropdown\",\"applySchema\":\"checkbox\"},\"context\":[{\"script\":[\"import logging\\r\",\"from datetime import datetime\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset):\\r\",\"        \\r\",\"        dataset = dataset.withColumn(\'response_SLA\' ,(unix_timestamp(\'createdDate\') + col(\'responseSLA\')).cast(\'timestamp\'))\\r\",\"        dataset = dataset.withColumn(\'resolution_SLA\',(unix_timestamp(\'createdDate\') + col(\'resolutionSLA\')).cast(\'timestamp\'))\\r\",\"    \\r\",\"    \\r\",\"        dataset = dataset.withColumn(\'last_updated\', lit(datetime.now()))\\r\",\"        dataset = dataset.withColumn(\'response_SLA_confidence\', lit(100))\\r\",\"        dataset = dataset.withColumn(\'resolution_SLA_confidence\', lit(100))\\r\",\"\\r\",\"        dataset = dataset.select(\'number\',\'response_SLA\',\'resolution_SLA\',\'response_SLA_confidence\',\'resolution_SLA_confidence\',\'last_updated\' )\\r\",\"        dataset.show()\\r\",\"        return dataset\\r\"]},{\"params\":\"\",\"script\":[\"import logging as logger\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset1, dataset2):\\r\",\"        dataset = dataset1.join(dataset2, \'priority\')\\r\",\"        dataset = dataset.withColumn(\'responseSLA\', (col(\'responseSLA\') * 3600.0))\\r\",\"        dataset = dataset.withColumn(\'resolutionSLA\', (col(\'resolutionSLA\') * 3600.0))\\r\",\"        dataset = dataset.select(\'id\',\'priority\',\'number\',\'responseSLA\',\'resolutionSLA\',\'createdDate\')\\r\",\"        dataset.show()\\r\",\"        return dataset\\r\",\"\\r\"]},{\"dataset\":{\"alias\":\"sla configuration\",\"name\":\"\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 07:03:18\",\"alias\":\"leo1311\",\"id\":15,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"@datasourcepass\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"@datasourceuser\\\",\\\"url\\\":\\\"@datasourceurl/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\",\"extras\":null},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from @projectname_sla_configuration\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},{\"dataset\":{\"alias\":\"Tickets\",\"name\":\"\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 07:03:18\",\"alias\":\"leo1311\",\"id\":15,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"@datasourcepass\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"@datasourceuser\\\",\\\"url\\\":\\\"@datasourceurl/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\",\"extras\":null},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT number,priority ,createdDate FROM @projectname_tickets WHERE createdDate IS NOT NULL AND\\n number NOT IN (SELECT NUMBER FROM @projectname_tickets_enriched WHERE resolution_SLA IS NOT NULL)\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"backingDataset\":null,\"organization\":\"leo1311\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]},{\"id\":\"XyhZO\",\"alias\":\"Pre  Processing  Script\",\"name\":\"Pre  Processing  Script\",\"classname\":\"PreProcessingScriptConfig\",\"category\":\"BaseConfig\",\"attributes\":{\"params\":\"\",\"script\":[\"import logging as logger\\r\",\"from pyspark.sql.functions import *\\r\",\"from pyspark.sql.types import *\\r\",\"class CustomPythonClass():\\r\",\"    def __main__(self, dataset1, dataset2):\\r\",\"        dataset = dataset1.join(dataset2, \'priority\')\\r\",\"        dataset = dataset.withColumn(\'responseSLA\', (col(\'responseSLA\') * 3600.0))\\r\",\"        dataset = dataset.withColumn(\'resolutionSLA\', (col(\'resolutionSLA\') * 3600.0))\\r\",\"        dataset = dataset.select(\'id\',\'priority\',\'number\',\'responseSLA\',\'resolutionSLA\',\'createdDate\')\\r\",\"        dataset.show()\\r\",\"        return dataset\\r\",\"\\r\"]},\"position_x\":\"370\",\"position_y\":\"140\",\"connectors\":[{\"type\":\"target\",\"endpoint\":\"dataset1\",\"position\":\"LeftMiddle\",\"elementId\":\"AJXpS\",\"elementPosition\":\"RightMiddle\"},{\"type\":\"target\",\"endpoint\":\"dataset2\",\"position\":\"TopCenter\",\"elementId\":\"LOhNn\",\"elementPosition\":\"RightMiddle\"},{\"type\":\"source\",\"endpoint\":\"out\",\"position\":\"RightMiddle\",\"elementId\":\"ePRxe\",\"elementPosition\":\"LeftMiddle\"}],\"inputEndpoints\":[\"dataset1\",\"dataset2\",\"dataset3\"],\"outputEndpoints\":[\"out\"],\"requiredJars\":[],\"formats\":{\"params\":\"textarea\",\"script\":\"textarea\"},\"context\":[{\"dataset\":{\"alias\":\"sla configuration\",\"name\":\"\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 07:03:18\",\"alias\":\"leo1311\",\"id\":15,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"@datasourcepass\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"@datasourceuser\\\",\\\"url\\\":\\\"@datasourceurl/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\",\"extras\":null},\"schema\":\"\",\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"select * from @projectname_sla_configuration\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"groups\":\"\",\"backingDataset\":\"\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false},{\"dataset\":{\"alias\":\"Tickets\",\"name\":\"\",\"description\":\"\",\"datasource\":{\"lastmodifiedby\":\"admin\",\"lastmodifieddate\":\"2021-04-09 07:03:18\",\"alias\":\"leo1311\",\"id\":15,\"name\":\"leo1311\",\"description\":\"Local data for setup\",\"type\":\"MYSQL\",\"connectionDetails\":\"{\\\"password\\\":\\\"@datasourcepass\\\",\\\"datasource\\\":\\\"\\\",\\\"userName\\\":\\\"@datasourceuser\\\",\\\"url\\\":\\\"@datasourceurl/leapmaster_ref_data\\\"}\",\"salt\":\"E1uP5fNKX66G/tyeT1Vz304MwyOa8urMohnCakE/bOnYf47zC+u9Q9+8tmjhlUagunL858NTWkxGo3bqHg9tEw==\",\"organization\":\"leo1311\",\"dshashcode\":\"2b057d5ee2557413a31224216f8d9e39708e21676559b1290e6a545f46d59dc8\",\"activetime\":null,\"category\":\"SQL\",\"extras\":null},\"schema\":null,\"type\":\"r\",\"attributes\":{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT number,priority ,createdDate FROM @projectname_tickets WHERE createdDate IS NOT NULL AND\\n number NOT IN (SELECT NUMBER FROM @projectname_tickets_enriched WHERE resolution_SLA IS NOT NULL)\",\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"},\"expStatus\":0,\"backingDataset\":null,\"organization\":\"leo1311\"},\"isValidation\":\"\",\"samplingRatio\":\"\",\"applySchema\":false}]}]}' WHERE NAME='ACMSLCLC50990' AND ORGANIZATION='leo1311';
		</sql>			
</changeSet>
<changeSet author="Leap" id="2v1-cip-366360">
	<sql dbms="mysql,h2,postgresql" splitStatements="true" stripComments="true">  
		UPDATE mlworkflowspec SET wkspec='{\"jsondata\":{\"stage1\":{\"Question\":\"Choose Dataset\",\"QuestionComponent\":\"ChooseDatasetComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDatasetsviewComponent\",\"alias\":\"Choose Dataset\"},\"input\":{},\"output\":{},\"Tab\":\"false\"},\"stage2\":{\"Question\":\"Run Clean Tickets Pipeline\",\"QuestionComponent\":\"ExecuteComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkLogsComponent\",\"alias\":\"Logs\"},\"input\":{\"inp1\":\"\",\"type\":\"pipeline\",\"event\":\"CleanTickets\",\"eventinp\":\"{}\",\"outputDataset\":\"\"},\"output\":{},\"Tab\":\"true\"},\"stage3\":{\"Question\":\"Cleaned  Tickets\",\"QuestionComponent\":\"NextComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDatasettableviewComponent\",\"alias\":\"Cleaned  Tickets\"},\"input\":{\"dataset\":\"ACMTCKTS76661\",\"inp1\":\"\"},\"output\":{},\"Tab\":\"true\"},\"stage4\":{\"Question\":\"Run Extract Words Pipeline\",\"QuestionComponent\":\"ExecuteComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDatasettableviewComponent\",\"alias\":\"Cleaned  Tickets\"},\"input\":{\"inp1\":\"\",\"type\":\"pipeline\",\"event\":\"ExtractWords\",\"eventinp\":\"{}\",\"outputDataset\":\"\",\"dataset\":\"ACMTCKTS76661\"},\"output\":{},\"Tab\":\"false\"},\"stage5\":{\"Question\":\"Choose stop words to remove from word corpus?\",\"QuestionComponent\":\"EmptyComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"DataCorpusViewComponent\",\"alias\":\"Word Corpus\"},\"input\":{\"dataset\":\"LEOINVRT55362\",\"inp1\":\"\"},\"output\":{},\"Tab\":\"true\"},\"stage6\":{\"Question\":\"Run Stop Words Remover Pipeline\",\"QuestionComponent\":\"ExecuteComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"DataCorpusViewComponent\",\"alias\":\"Word Corpus\"},\"input\":{\"inp1\":\"\",\"type\":\"pipeline\",\"event\":\"StopWords\",\"eventinp\":\"{\\\"Stop  Words  Remover\\\": { \\\"stopWords\\\": \\\"stage5\\\"} }\",\"outputDataset\":\"\",\"dataset\":\"LEOINVRT55362\"},\"output\":{},\"Tab\":\"false\"},\"stage7\":{\"Question\":\"Stop Words Removed from CleanedText\",\"QuestionComponent\":\"NextComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkLogsComponent\",\"alias\":\"CleanedText\"},\"input\":{},\"output\":{},\"Tab\":\"false\"},\"stage8\":{\"Question\":\"Run Phrase Extraction Pipeline\",\"QuestionComponent\":\"ExecuteComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkLogsComponent\",\"alias\":\"Logs\"},\"input\":{\"inp1\":\"\",\"type\":\"pipeline\",\"event\":\"PhraseExtraction\",\"eventinp\":\"{}\",\"outputDataset\":\"\"},\"output\":{},\"Tab\":\"false\"},\"stage9\":{\"Question\":\"Map the Keyphrases with categories\",\"QuestionComponent\":\"NextComponent\",\"mandatory\":\"false\",\"WorkareaComponent\":{\"Component\":\"WkDatasettableviewComponent\",\"alias\":\"Mapping\"},\"input\":{\"dataset\":\"ACMESMPN85731\",\"inp1\":\"\"},\"output\":{},\"Tab\":\"true\"},\"stage10\":{\"Question\":\"Run Key phrase mapping Pipeline\",\"QuestionComponent\":\"ExecuteComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDatasettableviewComponent\",\"alias\":\"Mapping\"},\"input\":{\"inp1\":\"\",\"type\":\"pipeline\",\"event\":\"Keyphrase\",\"eventinp\":\"{}\",\"outputDataset\":\"\",\"dataset\":\"ACMESMPN85731\"},\"output\":{},\"Tab\":\"false\"},\"stage11\":{\"Question\":\"Run Ticket Clustering \",\"QuestionComponent\":\"ExecuteComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkLogsComponent\",\"alias\":\"Ticket  Clustering\"},\"input\":{\"inp1\":\"\",\"type\":\"chain\",\"event\":\"TicketClustering\",\"eventinp\":\"{}\",\"outputDataset\":\"\"},\"output\":{},\"Tab\":\"false\"},\"stage12\":{\"Question\":\"Ticket Clustering Summary\",\"QuestionComponent\":\"EmptyComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDashboardComponent\",\"alias\":\"Summary\"},\"input\":{\"dashboardname\":\"Ticket Cluster\"},\"output\":{},\"Tab\":\"true\"}}}' WHERE wkname='TicketClustering';
	</sql>			
</changeSet>
<changeSet author="Leap" id="2v1-cip-366361">
		<sql dbms="mysql,h2,postgresql" splitStatements="true" stripComments="true">
		UPDATE mldataset SET attributes='{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT * FROM @projectname_invertedindex  ORDER BY IF(word RLIKE \'^[a-z]\',1,2);\",\"Cacheable\":false,\"isStreaming\":\"false\",\"Headers\":\"\",\"defaultValues\":\"\",\"QueryParams\":\"\",\"writeMode\":\"append\",\"params\":\"{}\",\"tableName\":\"@projectname_invertedindex\",\"uniqueIdentifier\":\"\"}' WHERE NAME='LEOINVRT55362' AND ORGANIZATION='leo1311';
		</sql>	
	 </changeSet>
<changeSet author="Leap" id="2v1-cip-366362">
   <sql dbms="mysql,h2,postgresql" splitStatements="true" stripComments="true">  
		UPDATE mldataset SET attributes = '{\"filter\":\"\",\"mode\":\"query\",\"Query\":\"SELECT SUM(COUNT) AS COUNT, ROUND(SUM(percent),2) AS PERCENT FROM (SELECT EASE,COUNT(*) AS COUNT, ROUND((CAST(COUNT(*) AS FLOAT )/CAST((SELECT COUNT(*) FROM @projectname_tickets ) AS FLOAT))*100,2) AS PERCENT FROM @projectname_phrase_extraction te JOIN @projectname_EASEMapping map ON te.mapped_phrase =map.Key_Word WHERE ease = {ease} AND ease!=\'\' AND ease IS NOT NULL GROUP BY ease) as ta\",\"Cacheable\":false,\"isStreaming\":\"false\",\"defaultValues\":\"\",\"writeMode\":\"append\",\"params\":\"{\'ease\':\'ease\'}\",\"tableName\":\"\",\"uniqueIdentifier\":\"\"}' WHERE NAME = 'ease_TotalTickets' AND ORGANIZATION='leo1311';
       </sql>            
    </changeSet>
<changeSet author="Leap" id="2v1-cip-366363">
   <sql dbms="mysql,h2,postgresql" splitStatements="true" stripComments="true">   
    	insert into mlworkflowspec (id, wkname, wkspec) values("7","TicketsAssignment","{\"jsondata\":{\"stage1\":{\"Question\":\"Choose Ticket Dataset\",\"QuestionComponent\":\"ChooseDatasetComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDatasetsviewComponent\",\"alias\":\"Datasets\"},\"input\":{},\"output\":{},\"Tab\":\"false\"},\"stage2\":{\"Question\":\"Choose Short Description Column\",\"QuestionComponent\":\"SingleselectComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDatasettableviewComponent\",\"alias\":\"Tickets\"},\"input\":{\"dataset\":\"\",\"inp1\":\"stage1\"},\"output\":{},\"Tab\":\"true\"},\"stage3\":{\"Question\":\"Choose Ticket Priority Column\",\"QuestionComponent\":\"SingleselectComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDatasettableviewComponent\",\"alias\":\"Tickets\"},\"input\":{\"inp1\":\"stage1\",\"dataset\":\"\"},\"output\":{},\"Tab\":\"false\"},\"stage4\":{\"Question\":\"Choose Ticket Status Column\",\"QuestionComponent\":\"SingleselectComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDatasettableviewComponent\",\"alias\":\"Tickets\"},\"input\":{\"inp1\":\"stage1\",\"dataset\":\"\"},\"output\":{},\"Tab\":\"false\"},\"stage5\":{\"Question\":\"Choose Keywords Dataset\",\"QuestionComponent\":\"ChooseDatasetComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDatasetsviewComponent\",\"alias\":\"Datasets\"},\"input\":{},\"output\":{},\"Tab\":\"false\"},\"stage6\":{\"Question\":\"Keywords\",\"QuestionComponent\":\"NextComponent\",\"mandatory\":\"false\",\"WorkareaComponent\":{\"Component\":\"WkDatasettableviewComponent\",\"alias\":\"Keywords\"},\"input\":{\"dataset\":\"\",\"inp1\":\"stage5\"},\"output\":{},\"Tab\":\"true\"},\"stage7\":{\"Question\":\"Technology Classification\",\"QuestionComponent\":\"ExecuteComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkLogsComponent\",\"alias\":\"Logs\"},\"input\":{\"inp1\":\"\",\"type\":\"pipeline\",\"event\":\"TechClassify\",\"eventinp\":\"{\\\"Dataset Extractor\\\": {\\\"dataset\\\":\\\"stage1\\\"},\\\"Keyword\\\":{\\\"dataset\\\":\\\"stage5\\\"}}\",\"outputDataset\":\"\"},\"output\":{},\"Tab\":\"true\"},\"stage8\":{\"Question\":\"Classified  Tickets\",\"QuestionComponent\":\"NextComponent\",\"mandatory\":\"false\",\"WorkareaComponent\":{\"Component\":\"WkDatasettableviewComponent\",\"alias\":\"ClassifiedTickets\"},\"input\":{\"dataset\":\"LEOCLSFD44591\",\"inp1\":\"\"},\"output\":{},\"Tab\":\"true\"},\"stage9\":{\"Question\":\"Select Roster Dataset\",\"QuestionComponent\":\"ChooseDatasetComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDatasetsviewComponent\",\"alias\":\"Datasets\"},\"input\":{},\"output\":{},\"Tab\":\"true\"},\"stage10\":{\"Question\":\"Roster Data\",\"QuestionComponent\":\"NextComponent\",\"mandatory\":\"false\",\"WorkareaComponent\":{\"Component\":\"WkDatasettableviewComponent\",\"alias\":\"UsersAvailable\"},\"input\":{\"dataset\":\"LEORSTRD13362\",\"inp1\":\"\"},\"output\":{},\"Tab\":\"true\"},\"stage11\":{\"Question\":\"Roster Definition\",\"QuestionComponent\":\"ChooseDatasetComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDatasetsviewComponent\",\"alias\":\"Datasets\"},\"input\":{},\"output\":{},\"Tab\":\"true\"},\"stage12\":{\"Question\":\"Roster Definition\",\"QuestionComponent\":\"NextComponent\",\"mandatory\":\"false\",\"WorkareaComponent\":{\"Component\":\"WkDatasettableviewComponent\",\"alias\":\"Shifts Definition\"},\"input\":{\"dataset\":\"LEORSTRD75225\",\"inp1\":\"\"},\"output\":{},\"Tab\":\"true\"},\"stage13\":{\"Question\":\"Assign Tickets\",\"QuestionComponent\":\"ExecuteComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDatasettableviewComponent\",\"alias\":\"Roster Data\"},\"input\":{\"dataset\":\"\",\"inp1\":\"\",\"type\":\"pipeline\",\"event\":\"ShiftAssignment\",\"eventinp\":\"{}\",\"outputDataset\":\"\"},\"output\":{},\"Tab\":\"false\"},\"stage14\":{\"Question\":\"Assigned Tickets\",\"QuestionComponent\":\"EmptyComponent\",\"mandatory\":\"true\",\"WorkareaComponent\":{\"Component\":\"WkDatasettableviewComponent\",\"alias\":\"Assigned Tickets\"},\"input\":{\"dataset\":\"LEOASGND51842\",\"inp1\":\"\"},\"output\":{},\"Tab\":\"true\"}}}");		
	</sql>
	</changeSet>


</databaseChangeLog>
